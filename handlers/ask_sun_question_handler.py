"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞.
"""

import logging
from aiogram.types import (
    CallbackQuery, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext

from db import get_session
from models import User, Prediction, Planet, PredictionType
from sqlalchemy import select, func

logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_QUESTIONS_PER_USER = 2


async def get_user_sun_question_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –°–æ–ª–Ω—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    async with get_session() as session:
        result = await session.execute(
            select(func.count(Prediction.prediction_id)).where(
                Prediction.user_id == user_id,
                Prediction.planet == Planet.sun,
                Prediction.prediction_type == PredictionType.paid,
                Prediction.is_active.is_(True),
                Prediction.is_deleted.is_(False),
                Prediction.question.is_not(None)  # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            )
        )
        return result.scalar() or 0


async def handle_ask_sun_question(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –¥–ª—è –°–æ–ª–Ω—Ü–∞
    
    Args:
        callback: CallbackQuery –æ—Ç –∫–Ω–æ–ø–∫–∏
        state: FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    """
    await callback.answer()
    
    user_id = callback.from_user.id
    logger.info(f"User {user_id} clicked 'Ask sun question' button")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –°–æ–ª–Ω—Ü—É
    question_count = await get_user_sun_question_count(user_id)
    
    if question_count >= MAX_QUESTIONS_PER_USER:
        if callback.message:
            await callback.message.answer(
                f"‚ùå –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n\n"
                f"–¢—ã —É–∂–µ –∑–∞–¥–∞–ª {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –°–æ–ª–Ω—Ü—É. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_QUESTIONS_PER_USER}\n\n"
                "–ù–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å "
                "–¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –°–æ–ª–Ω—Ü—É",
                                callback_data="get_sun_recommendations"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã",
                                callback_data="explore_other_areas"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="back_to_menu"
                            )
                        ]
                    ]
                )
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ç–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞
        prediction_result = await session.execute(
            select(Prediction).where(
                Prediction.user_id == user.user_id,
                Prediction.planet == Planet.sun,
                Prediction.prediction_type == PredictionType.paid,
                Prediction.is_active.is_(True),
                Prediction.is_deleted.is_(False),
                Prediction.sun_analysis.is_not(None)  # –ì–æ—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            )
        )
        prediction = prediction_result.scalar_one_or_none()
        
        if not prediction or not prediction.sun_analysis:
            if callback.message:
                await callback.message.answer(
                    "‚ùå –†–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞, –∞ –∑–∞—Ç–µ–º –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
                )
            return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è",
                    callback_data="sun_question_relationships"
                ),
                InlineKeyboardButton(
                    text="üíº –ö–∞—Ä—å–µ—Ä–∞",
                    callback_data="sun_question_career"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –§–∏–Ω–∞–Ω—Å—ã",
                    callback_data="sun_question_finances"
                ),
                InlineKeyboardButton(
                    text="üè† –°–µ–º—å—è",
                    callback_data="sun_question_family"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéØ –¶–µ–ª–∏ –∏ –º–µ—á—Ç—ã",
                    callback_data="sun_question_goals"
                ),
                InlineKeyboardButton(
                    text="üßò –ó–¥–æ—Ä–æ–≤—å–µ",
                    callback_data="sun_question_health"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å",
                    callback_data="sun_question_custom"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )
            ]
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
    remaining_questions = MAX_QUESTIONS_PER_USER - question_count
    if callback.message:
        await callback.message.answer(
            f"‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Ç—Ä–æ–ª–æ–≥—É –ø–æ –°–æ–ª–Ω—Ü—É\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining_questions} –∏–∑ "
            f"{MAX_QUESTIONS_PER_USER}\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:\n\n"
            "üí° –Ø –æ—Ç–≤–µ—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞ –∏ –¥–∞–º "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã!",
            reply_markup=keyboard
        )

