"""
–ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É–∂–±—ã –∑–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –∫–æ–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π.
"""

import logging

from aiogram import Bot
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import BOT_TOKEN

logger = logging.getLogger(__name__)

# ID –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_CHAT_ID = 6310922392  # ID –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = Bot(token=BOT_TOKEN)


class SupportForm(StatesGroup):
    waiting_for_message = State()


async def handle_support_message(message: Message, state: FSMContext):
    """
    –ù–û–í–´–ô –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    logger.info("=== SUPPORT MESSAGE HANDLER STARTED ===")
    
    try:
        user = message.from_user
        if not user:
            logger.error("User not found in message")
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info(f"Processing support message from user {user.id}")
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó Markdown
        support_text = "üÜò –ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£\n\n"
        support_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'}\n"
        support_text += f"ID: {user.id}\n"
        
        if user.first_name:
            name = user.first_name
            if user.last_name:
                name += f" {user.last_name}"
            support_text += f"–ò–º—è: {name}\n"
        
        if message.text:
            support_text += f"\n–°–û–û–ë–©–ï–ù–ò–ï:\n{message.text}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –ë–ï–ó parse_mode
        logger.info(f"Sending message to support chat {SUPPORT_CHAT_ID}")
        await bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=support_text
        )
        logger.info("Message sent to support chat successfully")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if message.photo:
            await bot.send_photo(
                chat_id=SUPPORT_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=f"–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}"
            )
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "üí´ –ü—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å!\n"
            "–í–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üêà‚Äç‚¨õ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üíµ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä",
                            callback_data="buy_analysis"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            )
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.info("Support message handling completed successfully")
        
    except Exception as e:
        logger.error(f"ERROR in handle_support_message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é:\n"
            "üìß Email: support@astro-bot.ru\n"
            "üí¨ Telegram: @astro_support"
        )


async def start_support_conversation(message: Message, state: FSMContext):
    """
    –ù–û–í–ê–Ø –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
    """
    logger.info("=== START SUPPORT CONVERSATION ===")
    
    try:
        logger.info("Setting support state...")
        await state.set_state(SupportForm.waiting_for_message)
        
        logger.info("Sending support message to user...")
        await message.answer(
            "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã ü™Ñ\n"
            "üëáüèº –û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç</b>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            ),
            parse_mode="HTML"
        )
        
        logger.info("Support conversation started successfully!")
        
    except Exception as e:
        logger.error(f"ERROR in start_support_conversation: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é:\n"
            "üìß Email: support@astro-bot.ru\n"
            "üí¨ Telegram: @astro_support"
        )


async def cancel_support(callback_query: CallbackQuery, state: FSMContext):
    """
    –ù–û–í–ê–Ø –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    logger.info("=== CANCEL SUPPORT ===")
    
    try:
        logger.info("Clearing state...")
        await state.clear()
        
        logger.info("Updating message...")
        if callback_query.message:
            await callback_query.message.edit_text(
                "‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=None
            )
        
        logger.info("Answering callback...")
        await callback_query.answer()
        
        logger.info("Support cancelled successfully!")
        
    except Exception as e:
        logger.error(f"ERROR in cancel_support: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.", show_alert=True)
