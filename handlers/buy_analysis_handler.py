"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
"""

import logging

from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)


async def show_buy_analysis_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–æ–≤ —Å —á–µ—Ç—ã—Ä—å–º—è –æ–ø—Ü–∏—è–º–∏:
    1. –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è
    2. –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
    3. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É
    4. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ—Ç—ã—Ä—å–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëë –ö—É–ø–∏—Ç—å –¥–ª—è —Å–µ–±—è",
                    callback_data="buy_analysis_self"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ö—É–ø–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞—Ç",
                    callback_data="buy_analysis_additional"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É",
                    callback_data="add_new_date"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )
            ]
        ]
    )

    menu_text = (
        "<b>üíµ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä</b>\n\n"
        "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "üëë –ö—É–ø–∏—Ç—å –¥–ª—è —Å–µ–±—è ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—é–¥–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä "
        "–ø–æ —Å–≤–æ–µ–π –¥–∞—Ç–µ \n"
        "üë• –ö—É–ø–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—é–¥–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä "
        "–ø–æ –¥—Ä—É–≥–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞—Ç–∞–º \n\n"
        "<b>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>üëáüèº"
    )
    
    await message.answer(
        menu_text,
        reply_markup=kb,
        parse_mode="HTML"
    )


async def show_additional_profiles_for_purchase(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–æ–≤.
    –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.
    """
    await callback.answer()
    cb_msg = callback.message
    
    try:
        user_id = callback.from_user.id if callback.from_user else 0
        logger.info("User %s: select profile for purchase", user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from db import get_session
        from models import User, AdditionalProfile
        from sqlalchemy import select
        
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                await cb_msg.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profiles_result = await session.execute(
                select(AdditionalProfile)
                .where(
                    AdditionalProfile.owner_user_id == user.user_id,
                    AdditionalProfile.is_active.is_(True)
                )
                .order_by(AdditionalProfile.created_at.desc())
            )
            profiles = profiles_result.scalars().all()
            
            if not profiles:
                # –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
                await cb_msg.answer(
                    "üë• **–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è:\n"
                    "‚Ä¢ –ß–ª–µ–Ω–∞ —Å–µ–º—å–∏ (–º–∞–º–∞, –ø–∞–ø–∞, –±—Ä–∞—Ç, —Å–µ—Å—Ç—Ä–∞)\n"
                    "‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∞\n"
                    "‚Ä¢ –†–µ–±–µ–Ω–∫–∞\n\n"
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                    callback_data="add_new_date"
                                )
                            ],
                            [
                                InlineKeyboardButton(
                                    text="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∫—É–ø–∫–∏",
                                    callback_data="buy_analysis"
                                )
                            ]
                        ]
                    )
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
            text = "üë• **–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç**\n\n"
            text += f"–£ –≤–∞—Å {len(profiles)} "
            if len(profiles) == 1:
                text += "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
            elif len(profiles) < 5:
                text += "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"
            else:
                text += "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"
            text += ".\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä—ã:"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            buttons = []
            for profile in profiles:
                gender_emoji = {
                    "male": "üë®",
                    "female": "üë©",
                    "other": "üßë"
                }.get(
                    profile.gender.value if profile.gender else "unknown",
                    "üë§",
                )
                
                profile_button = InlineKeyboardButton(
                    text=f"{gender_emoji} {profile.full_name}",
                    callback_data=f"buy_for_profile:{profile.profile_id}"
                )
                buttons.append([profile_button])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons.extend([
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data="add_new_date"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∫—É–ø–∫–∏",
                        callback_data="buy_analysis"
                    )
                ]
            ])
            
            await cb_msg.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in show_additional_profiles_for_purchase: {e}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∫—É–ø–∫–∏",
                            callback_data="buy_analysis"
                        )
                    ]
                ]
            )
        )


async def handle_buy_for_profile(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data
        profile_id = int(callback.data.split(":")[1])
        user_id = callback.from_user.id if callback.from_user else 0
        
        logger.info(f"User {user_id} buying analysis for profile {profile_id}")
        
        from db import get_session
        from models import User, AdditionalProfile, Prediction, Planet
        from sqlalchemy import select
        
        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                await callback.message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile_result = await session.execute(
                select(AdditionalProfile)
                .where(
                    AdditionalProfile.profile_id == profile_id,
                    AdditionalProfile.owner_user_id == user.user_id,
                    AdditionalProfile.is_active.is_(True)
                )
            )
            profile = profile_result.scalar_one_or_none()
            
            if not profile:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º",
                                    callback_data="buy_analysis_additional"
                                )
                            ]
                        ]
                    )
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–æ—Ä–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            predictions_result = await session.execute(
                select(Prediction)
                .where(
                    Prediction.profile_id == profile_id,
                    Prediction.is_active.is_(True)
                )
            )
            existing_predictions = predictions_result.scalars().all()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–ª–∞–Ω–µ—Ç—ã —É–∂–µ –µ—Å—Ç—å
            existing_planets = {pred.planet for pred in existing_predictions}
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
            planets_info = {
                Planet.sun: {
                    "emoji": "‚òÄÔ∏è",
                    "name": "–°–æ–ª–Ω—Ü–µ", 
                    "price": 500,
                    "description": "–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å"
                },
                Planet.moon: {
                    "emoji": "üåô",
                    "name": "–õ—É–Ω–∞",
                    "price": 500, 
                    "description": "–≠–º–æ—Ü–∏–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä"
                },
                Planet.mercury: {
                    "emoji": "‚òøÔ∏è",
                    "name": "–ú–µ—Ä–∫—É—Ä–∏–π",
                    "price": 500,
                    "description": "–û–±—â–µ–Ω–∏–µ –∏ –º—ã—à–ª–µ–Ω–∏–µ"
                },
                Planet.venus: {
                    "emoji": "‚ôÄÔ∏è", 
                    "name": "–í–µ–Ω–µ—Ä–∞",
                    "price": 500,
                    "description": "–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
                },
                Planet.mars: {
                    "emoji": "‚ôÇÔ∏è",
                    "name": "–ú–∞—Ä—Å", 
                    "price": 500,
                    "description": "–≠–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è"
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
            available_buttons = []
            total_available = 0
            
            for planet, info in planets_info.items():
                if planet not in existing_planets:
                    # –ù–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å —Ü–µ–Ω–æ–π –∏ —ç–º–æ–¥–∑–∏
                    if planet == Planet.sun:
                        btn_text = "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ 77‚ÇΩ"
                    elif planet == Planet.mercury:
                        btn_text = "üß† –ú–µ—Ä–∫—É—Ä–∏–π 77‚ÇΩ"
                    elif planet == Planet.venus:
                        btn_text = "üí∞üíç –í–µ–Ω–µ—Ä–∞ 77‚ÇΩ"
                    elif planet == Planet.mars:
                        btn_text = "üî• –ú–∞—Ä—Å 77‚ÇΩ"
                    elif planet == Planet.moon:
                        btn_text = "üåô –õ—É–Ω–∞ 77‚ÇΩ"
                    else:
                        btn_text = f"{info['emoji']} {info['name']} 77‚ÇΩ"
                    available_buttons.append([
                        InlineKeyboardButton(
                            text=btn_text,
                            callback_data=f"buy_profile_planet:{profile_id}:{planet.value}"
                        )
                    ])
                    total_available += 1
            
            if total_available == 0:
                # –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —É–∂–µ –∫—É–ø–ª–µ–Ω—ã
                await callback.message.answer(
                    f"üéâ **{profile.full_name}**\n\n"
                    f"–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —É–∂–µ –∫—É–ø–ª–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–±–æ—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "
                    f"'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã'.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º",
                                    callback_data="buy_analysis_additional"
                                )
                            ]
                        ]
                    ),
                    parse_mode="Markdown"
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —Å–æ —Å–∫–∏–¥–∫–æ–π" –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ 1
            if total_available > 1:
                # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã"
                available_buttons.append([
                    InlineKeyboardButton(
                        text="üòé –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã 222‚ÇΩ",
                        callback_data=f"buy_all_planets:{profile_id}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            available_buttons.extend([
                [
                    InlineKeyboardButton(
                        text="‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º",
                        callback_data="buy_analysis_additional"
                    )
                ]
            ])
            
            gender_emoji = {
                "male": "üë®",
                "female": "üë©",
                "other": "üßë"
            }.get(profile.gender.value if profile.gender else "unknown", "üë§")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏
            text_parts = [
                f"üí≥ **–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è {profile.full_name}**\n",
                f"{gender_emoji} –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç:\n"
            ]
            
            for planet, info in planets_info.items():
                if planet in existing_planets:
                    battery = "üîã"  # –ó–µ–ª–µ–Ω–∞—è –±–∞—Ç–∞—Ä–µ–π–∫–∞ - –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä
                else:
                    battery = "ü™´"  # –ö—Ä–∞—Å–Ω–∞—è –±–∞—Ç–∞—Ä–µ–π–∫–∞ - –Ω–µ—Ç —Ä–∞–∑–±–æ—Ä–∞
                
                planet_text = (
                    f"{battery} {info['emoji']} **{info['name']}** - "
                    f"{info['description']}"
                )
                text_parts.append(planet_text)
            
            if total_available > 0:
                text_parts.extend([
                    f"\nüìã **–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:** {total_available} —Ä–∞–∑–±–æ—Ä–æ–≤",
                    "üí∞ **–¶–µ–Ω–∞ –∑–∞ –ø–ª–∞–Ω–µ—Ç—É:** 77‚ÇΩ"
                ])
            
            text_parts.append(
                "\nüîã - —Ä–∞–∑–±–æ—Ä –µ—Å—Ç—å  ü™´ - —Ä–∞–∑–±–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
            )
            text_parts.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–µ—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
            
            await callback.message.answer(
                "\n".join(text_parts),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=available_buttons),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in handle_buy_for_profile: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º", 
                            callback_data="buy_analysis_additional"
                        )
                    ]
                ]
            )
        )


async def handle_buy_analysis_self(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É)
        user_id = callback.from_user.id if callback.from_user else 0
        logger.info(f"handle_buy_analysis_self –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        message = callback.message
        if not message:
            logger.error("callback.message is None")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞—Ö
        from db import get_session
        from models import User, Prediction, Planet
        from sqlalchemy import select
        
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id={user_id}")
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)
            existing_predictions = await session.execute(
                select(Prediction.planet)
                .where(
                    Prediction.user_id == user.user_id,
                    Prediction.is_deleted.is_(False),
                    Prediction.profile_id.is_(None)  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã
                )
                .distinct()
            )
            owned_planets = {
                pred.planet for pred in existing_predictions.fetchall()
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –∏ –∏—Ö —Ü–µ–Ω—ã
            planets_info = [
                {
                    "planet": Planet.sun,
                    "emoji": "‚òÄÔ∏è",
                    "name": "–°–æ–ª–Ω—Ü–µ",
                    "description": "–¢–≤–æ—è —Å—É—â–Ω–æ—Å—Ç—å –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞",
                    "price": 500,
                    "callback": "pay_sun"
                },
                {
                    "planet": Planet.mercury,
                    "emoji": "‚òøÔ∏è",
                    "name": "–ú–µ—Ä–∫—É—Ä–∏–π", 
                    "description": "–ú—ã—à–ª–µ–Ω–∏–µ –∏ –æ–±—â–µ–Ω–∏–µ",
                    "price": 500,
                    "callback": "pay_mercury"
                },
                {
                    "planet": Planet.venus,
                    "emoji": "‚ôÄÔ∏è",
                    "name": "–í–µ–Ω–µ—Ä–∞",
                    "description": "–õ—é–±–æ–≤—å –∏ –∫—Ä–∞—Å–æ—Ç–∞",
                    "price": 500,
                    "callback": "pay_venus"
                },
                {
                    "planet": Planet.mars,
                    "emoji": "‚ôÇÔ∏è",
                    "name": "–ú–∞—Ä—Å",
                    "description": "–≠–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è",
                    "price": 500,
                    "callback": "pay_mars"
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏
            keyboard_buttons = []
            available_count = 0
            
            for planet_info in planets_info:
                if planet_info["planet"] in owned_planets:
                    # –ü–ª–∞–Ω–µ—Ç–∞ –∫—É–ø–ª–µ–Ω–∞ - –∑–µ–ª–µ–Ω–∞—è –±–∞—Ç–∞—Ä–µ–π–∫–∞
                    battery = "üîã"
                else:
                    # –ü–ª–∞–Ω–µ—Ç–∞ –Ω–µ –∫—É–ø–ª–µ–Ω–∞ - –∫—Ä–∞—Å–Ω–∞—è –±–∞—Ç–∞—Ä–µ–π–∫–∞
                    battery = "ü™´"
                    available_count += 1
                
                btn_text = f"{battery} {planet_info['name']}"
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=btn_text,
                        callback_data=planet_info['callback']
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã" –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ
            if available_count > 1:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã 222‚ÇΩ",
                        callback_data="pay_all_planets"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="buy_analysis"
                )
            ])
            
            kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_parts = [
                "ÔøΩ <b>–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è</b>\n\n",
                "–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n",
                "üîã ‚Üí —ç—Ç–∞ –ø–ª–∞–Ω–µ—Ç–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞! –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–Ω–æ–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç—ã –∏ –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ + –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã üí´\n",
                "ü™´ ‚Üí —ç—Ç–∞ –ø–ª–∞–Ω–µ—Ç–∞ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞! –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π üí∞\n\n",
                "–ö—Ä–∞—Ç–∫–∞—è –ø–∞–º—è—Ç–∫–∞ –ø–æ –ø–ª–∞–Ω–µ—Ç–∞–º:\n",
                "üåô –õ—É–Ω–∞ ‚Äî –±–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä, —Å–µ–º—å—è\n",
                "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ ‚Äî —ç–Ω–µ—Ä–≥–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n",
                "üß† –ú–µ—Ä–∫—É—Ä–∏–π ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –æ–±—É—á–µ–Ω–∏–µ\n",
                "üí∞ÔøΩ –í–µ–Ω–µ—Ä–∞ ‚Äî –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã, —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∂–∏–∑–Ω–∏\n",
                "üî• –ú–∞—Ä—Å ‚Äî —Å–∏–ª–∞, —É–º–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –º–æ—Ç–∏–≤–∞—Ü–∏—è\n\n",
                "üîì –ü–æ–∫–∞ –±–æ—Ç –Ω–∞ —Ç–µ—Å—Ç–µ, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ø–æ—á—Ç–∏ –¥–∞—Ä–æ–º:\n\n",
                "ÔøΩ <b>–û–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ ‚Äî 77‚ÇΩ (–≤–º–µ—Å—Ç–æ 999‚ÇΩ)</b>\n",
                "üí£ <b>–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —Å—Ä–∞–∑—É ‚Äî 222‚ÇΩ (–≤–º–µ—Å—Ç–æ 5555‚ÇΩ)</b> + üéÅ: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –õ–∏–ª–∏—Ç 24/7\n\n",
                "<b>–í—ã–±–µ—Ä–∏ —Ä–∞–∑–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ</b>üëáüèº"
            ]
            
            await message.answer(
                "".join(text_parts),
                reply_markup=kb,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ –ø–æ–∫—É–ø–∫–µ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        if message:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–∑–±–æ—Ä–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data="buy_analysis"
                            )
                        ]
                    ]
                )
            )


async def handle_add_new_date(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É".
    –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
    """
    message = callback.message
    if not message:
        return
    
    await message.answer(
        "üìÖ **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö.\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
        "‚Ä¢ –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–∞\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="buy_analysis"
                    )
                ]
            ]
        ),
        parse_mode="Markdown"
    )
