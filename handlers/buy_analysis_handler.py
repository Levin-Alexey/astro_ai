"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
"""

import logging

from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)


async def show_buy_analysis_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–æ–≤ —Å —Ç—Ä–µ–º—è –æ–ø—Ü–∏—è–º–∏:
    1. –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è
    2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É  
    3. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è",
                    callback_data="buy_analysis_self"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É",
                    callback_data="add_new_date"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )
            ]
        ]
    )

    menu_text = (
        "üí≥ **–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üí≥ **–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è**\n"
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "üìÖ **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É**\n"
        "–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–¥—Ä—É–≥, —Ä–µ–±–µ–Ω–æ–∫, –ø–∞—Ä—Ç–Ω–µ—Ä)\n\n"
        "–í—Å–µ —Ä–∞–∑–±–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!"
    )
    
    await message.answer(
        menu_text,
        reply_markup=kb,
        parse_mode="Markdown"
    )


async def handle_buy_analysis_self(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É)
        user_id = callback.from_user.id if callback.from_user else 0
        logger.info(f"handle_buy_analysis_self –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        message = callback.message
        if not message:
            logger.error("callback.message is None")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞—Ö
        from db import get_session
        from models import User, Prediction, Planet
        from sqlalchemy import select
        
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id={user_id}")
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã
            existing_predictions = await session.execute(
                select(Prediction.planet)
                .where(
                    Prediction.user_id == user.user_id,
                    Prediction.is_deleted.is_(False)
                )
                .distinct()
            )
            owned_planets = {
                pred.planet for pred in existing_predictions.fetchall()
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –∏ –∏—Ö —Ü–µ–Ω—ã
            planets_info = [
                {
                    "planet": Planet.sun,
                    "emoji": "‚òÄÔ∏è",
                    "name": "–°–æ–ª–Ω—Ü–µ",
                    "description": "–¢–≤–æ—è —Å—É—â–Ω–æ—Å—Ç—å –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞",
                    "price": 500,
                    "callback": "pay_sun"
                },
                {
                    "planet": Planet.mercury,
                    "emoji": "‚òøÔ∏è",
                    "name": "–ú–µ—Ä–∫—É—Ä–∏–π", 
                    "description": "–ú—ã—à–ª–µ–Ω–∏–µ –∏ –æ–±—â–µ–Ω–∏–µ",
                    "price": 500,
                    "callback": "pay_mercury"
                },
                {
                    "planet": Planet.venus,
                    "emoji": "‚ôÄÔ∏è",
                    "name": "–í–µ–Ω–µ—Ä–∞",
                    "description": "–õ—é–±–æ–≤—å –∏ –∫—Ä–∞—Å–æ—Ç–∞",
                    "price": 500,
                    "callback": "pay_venus"
                },
                {
                    "planet": Planet.mars,
                    "emoji": "‚ôÇÔ∏è",
                    "name": "–ú–∞—Ä—Å",
                    "description": "–≠–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è",
                    "price": 500,
                    "callback": "pay_mars"
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
            keyboard_buttons = []
            available_count = 0
            
            for planet_info in planets_info:
                if planet_info["planet"] not in owned_planets:
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text=f"{planet_info['emoji']} {planet_info['name']} - {planet_info['price']}‚ÇΩ",
                            callback_data=planet_info['callback']
                        )
                    ])
                    available_count += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã" –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ
            if available_count > 1:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="ü™ê –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã - 1500‚ÇΩ (—Å–∫–∏–¥–∫–∞ 25%)",
                        callback_data="pay_all_planets"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="buy_analysis"
                )
            ])
            
            kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_parts = [
                "üí≥ **–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è**\n",
                "–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω–µ—Ç—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞:\n"
            ]
            
            for planet_info in planets_info:
                if planet_info["planet"] in owned_planets:
                    status = "‚úÖ –£–∂–µ –µ—Å—Ç—å"
                else:
                    status = f"üí∞ {planet_info['price']}‚ÇΩ"
                
                planet_text = (
                    f"{planet_info['emoji']} **{planet_info['name']}** - "
                    f"{planet_info['description']} ({status})"
                )
                text_parts.append(planet_text)
            
            if available_count == 0:
                text_parts.append("\nüéâ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤—Å–µ —Ä–∞–∑–±–æ—Ä—ã –ø–ª–∞–Ω–µ—Ç!")
            else:
                text_parts.append(
                    f"\nüí° **–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:** {available_count} —Ä–∞–∑–±–æ—Ä–æ–≤"
                )
                if available_count > 1:
                    text_parts.append(
                        "üéÅ **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** –ö—É–ø–∏ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —Å—Ä–∞–∑—É —Å–æ —Å–∫–∏–¥–∫–æ–π 25%!"
                    )
            
            text_parts.append("\nüîÆ –ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç:")
            text_parts.append(
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ç—ã –≤ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ"
            )
            text_parts.append("‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            text_parts.append("‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã")
            
            await message.answer(
                "\n".join(text_parts),
                reply_markup=kb,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ –ø–æ–∫—É–ø–∫–µ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        if message:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞–∑–±–æ—Ä–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data="buy_analysis"
                            )
                        ]
                    ]
                )
            )


async def handle_add_new_date(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É".
    –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
    """
    message = callback.message
    if not message:
        return
    
    await message.answer(
        "üìÖ **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö.\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
        "‚Ä¢ –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–∞\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="buy_analysis"
                    )
                ]
            ]
        ),
        parse_mode="Markdown"
    )
