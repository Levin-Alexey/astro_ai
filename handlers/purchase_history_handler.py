from aiogram import Router, types
 # –£–¥–∞–ª–µ–Ω–æ: CallbackQuery, Command –∏–∑ aiogram.filters
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime

from db import get_session
from models import PlanetPayment, PaymentStatus, PaymentType, Planet, User

router = Router()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
def get_back_to_profile_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="personal_cabinet")]
        ]
    )

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞
def format_payment(payment: PlanetPayment) -> str:
    dt = payment.created_at.strftime('%d.%m.%Y %H:%M') if payment.created_at else "-"
    status = {
        PaymentStatus.pending: "üïí –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        PaymentStatus.completed: "‚úÖ –û–ø–ª–∞—á–µ–Ω",
        PaymentStatus.failed: "‚ùå –û—à–∏–±–∫–∞",
        PaymentStatus.refunded: "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç",
        PaymentStatus.processing: "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞",
        PaymentStatus.analysis_failed: "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞",
        PaymentStatus.delivered: "üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    }.get(payment.status, str(payment.status))
    
    if payment.payment_type == PaymentType.single_planet:
        planet = {
            Planet.moon: "–õ—É–Ω–∞",
            Planet.sun: "–°–æ–ª–Ω—Ü–µ",
            Planet.mercury: "–ú–µ—Ä–∫—É—Ä–∏–π",
            Planet.venus: "–í–µ–Ω–µ—Ä–∞",
            Planet.mars: "–ú–∞—Ä—Å"
        }.get(payment.planet, str(payment.planet))
        type_str = f"–û–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ ({planet})"
    else:
        type_str = "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã"
    amount = f"{payment.amount_kopecks // 100} —Ä—É–±. {payment.amount_kopecks % 100:02d} –∫–æ–ø."
    return f"{dt}\n–¢–∏–ø: {type_str}\n–°—É–º–º–∞: {amount}\n–°—Ç–∞—Ç—É—Å: {status}\n"

@router.callback_query(lambda c: c.data == "purchase_history")
async def purchase_history_handler(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    async with get_session() as session:  # type: AsyncSession
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user_result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É user_id
        result = await session.execute(
            select(PlanetPayment).where(PlanetPayment.user_id == user.user_id).order_by(PlanetPayment.created_at.desc())
        )
        payments = result.scalars().all()

    if not payments:
        text = "–ü–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç –≤ —ç—Ç–æ–º –º–µ–Ω—é."
    else:
        text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫ üõçüëáüèº\n\n" + "\n".join(
            [f"‚≠êÔ∏è {p.created_at.strftime('%d.%m.%Y %H:%M') if p.created_at else '-'}\n–¢–∏–ø: {'–û–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ (' + {Planet.moon: '–õ—É–Ω–∞', Planet.sun: '–°–æ–ª–Ω—Ü–µ', Planet.mercury: '–ú–µ—Ä–∫—É—Ä–∏–π', Planet.venus: '–í–µ–Ω–µ—Ä–∞', Planet.mars: '–ú–∞—Ä—Å'}.get(p.planet, str(p.planet)) + ')' if p.payment_type == PaymentType.single_planet else '–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã'}\n–°—É–º–º–∞: {p.amount_kopecks // 100} —Ä—É–±. {p.amount_kopecks % 100:02d} –∫–æ–ø.\n–°—Ç–∞—Ç—É—Å: {'üïí –í –æ–∂–∏–¥–∞–Ω–∏–∏' if p.status == PaymentStatus.pending else '‚úÖ –û–ø–ª–∞—á–µ–Ω' if p.status == PaymentStatus.completed else '‚ùå –û—à–∏–±–∫–∞' if p.status == PaymentStatus.failed else '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç' if p.status == PaymentStatus.refunded else '‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞' if p.status == PaymentStatus.processing else '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞' if p.status == PaymentStatus.analysis_failed else 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω' if p.status == PaymentStatus.delivered else str(p.status)}\n" for p in payments]
        )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ù§Ô∏è‚Äçü©π –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã",
                    callback_data="support"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="personal_cabinet"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()
