from aiogram import Router, types
from aiogram.filters import CallbackQuery, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime

from db import get_session
from models import PlanetPayment, PaymentStatus, PaymentType, Planet

router = Router()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
def get_back_to_profile_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_menu")]
        ]
    )

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞
def format_payment(payment: PlanetPayment) -> str:
    dt = payment.created_at.strftime('%d.%m.%Y %H:%M') if payment.created_at else "-"
    status = {
        PaymentStatus.pending: "üïí –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        PaymentStatus.completed: "‚úÖ –û–ø–ª–∞—á–µ–Ω",
        PaymentStatus.failed: "‚ùå –û—à–∏–±–∫–∞",
        PaymentStatus.refunded: "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç",
        PaymentStatus.processing: "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞",
        PaymentStatus.analysis_failed: "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞",
        PaymentStatus.delivered: "üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    }.get(payment.status, str(payment.status))
    
    if payment.payment_type == PaymentType.single_planet:
        planet = {
            Planet.moon: "–õ—É–Ω–∞",
            Planet.sun: "–°–æ–ª–Ω—Ü–µ",
            Planet.mercury: "–ú–µ—Ä–∫—É—Ä–∏–π",
            Planet.venus: "–í–µ–Ω–µ—Ä–∞",
            Planet.mars: "–ú–∞—Ä—Å"
        }.get(payment.planet, str(payment.planet))
        type_str = f"–û–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ ({planet})"
    else:
        type_str = "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã"
    amount = f"{payment.amount_kopecks // 100} —Ä—É–±. {payment.amount_kopecks % 100:02d} –∫–æ–ø."
    return f"{dt}\n–¢–∏–ø: {type_str}\n–°—É–º–º–∞: {amount}\n–°—Ç–∞—Ç—É—Å: {status}\n"

@router.callback_query(lambda c: c.data == "purchase_history")
async def purchase_history_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with get_session() as session:  # type: AsyncSession
        result = await session.execute(
            select(PlanetPayment).where(PlanetPayment.user_id == user_id).order_by(PlanetPayment.created_at.desc())
        )
        payments = result.scalars().all()
    if not payments:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç –≤ —ç—Ç–æ–º –º–µ–Ω—é."
    else:
        text = "<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:</b>\n\n" + "\n---------------------\n".join(format_payment(p) for p in payments)
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_profile_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
