"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –ú–∞—Ä—Å–∞.
"""

import logging
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from db import get_session
from models import User, Prediction, Planet, PredictionType
from sqlalchemy import select, desc
from queue_sender import send_mars_recommendation_to_queue

logger = logging.getLogger(__name__)


async def handle_get_mars_recommendations(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –¥–ª—è –ú–∞—Ä—Å–∞
    
    Args:
        callback: CallbackQuery –æ—Ç –∫–Ω–æ–ø–∫–∏
        state: FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    """
    await callback.answer()
    
    user_id = callback.from_user.id
    logger.info(f"User {user_id} requested mars recommendations")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ç–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞ (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π)
        prediction_result = await session.execute(
            select(Prediction).where(
                Prediction.user_id == user.user_id,
                Prediction.planet == Planet.mars,
                Prediction.prediction_type == PredictionType.paid,
                Prediction.mars_analysis.isnot(None)
            ).order_by(desc(Prediction.created_at))
        )
        prediction = prediction_result.scalar_one_or_none()
        
        if not prediction:
            if callback.message:
                await callback.message.answer(
                    "‚ùå –†–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞."
                )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        try:
            success = await send_mars_recommendation_to_queue(
                prediction.prediction_id,
                user_id,
                prediction.mars_analysis
            )
            
            if success:
                if callback.message:
                    await callback.message.answer(
                        "üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ú–∞—Ä—Å—É...\n\n"
                        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
                    )
                logger.info(f"Mars recommendations request sent to queue for user {user_id}")
            else:
                if callback.message:
                    await callback.message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                logger.error(f"Failed to send Mars recommendations request for user {user_id}")
                
        except Exception as e:
            logger.error(f"Error sending Mars recommendations request: {e}")
            if callback.message:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
