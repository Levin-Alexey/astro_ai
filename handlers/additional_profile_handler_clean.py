"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–µ–º—å–∏, –¥—Ä—É–∑–µ–π) —Å —Ç–µ–º –∂–µ
–∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –æ–ø—Ä–æ—Å–∞, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
"""

import logging
from datetime import datetime, date, time

from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy import select

from models import User, AdditionalProfile, Gender, ZodiacSignRu, Prediction, Planet, PredictionType
from typing import Optional, Dict, Any
from db import get_session
from geocoding import geocode_city_ru, GeocodingError
from timezone_utils import resolve_timezone

logger = logging.getLogger(__name__)


def zodiac_sign_ru_for_date(d: date) -> ZodiacSignRu:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º) –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è."""
    m, day = d.month, d.day
    if (m == 12 and day >= 22) or (m == 1 and day <= 19):
        return ZodiacSignRu.kozerog
    elif (m == 1 and day >= 20) or (m == 2 and day <= 18):
        return ZodiacSignRu.vodolei
    elif (m == 2 and day >= 19) or (m == 3 and day <= 20):
        return ZodiacSignRu.ryby
    elif (m == 3 and day >= 21) or (m == 4 and day <= 19):
        return ZodiacSignRu.oven
    elif (m == 4 and day >= 20) or (m == 5 and day <= 20):
        return ZodiacSignRu.telec
    elif (m == 5 and day >= 21) or (m == 6 and day <= 20):
        return ZodiacSignRu.bliznecy
    elif (m == 6 and day >= 21) or (m == 7 and day <= 22):
        return ZodiacSignRu.rak
    elif (m == 7 and day >= 23) or (m == 8 and day <= 22):
        return ZodiacSignRu.lev
    elif (m == 8 and day >= 23) or (m == 9 and day <= 22):
        return ZodiacSignRu.deva
    elif (m == 9 and day >= 23) or (m == 10 and day <= 22):
        return ZodiacSignRu.vesy
    elif (m == 10 and day >= 23) or (m == 11 and day <= 21):
        return ZodiacSignRu.skorpion
    else:  # (m == 11 and day >= 22) or (m == 12 and day <= 21)
        return ZodiacSignRu.strelec


def format_time_accuracy_message(accuracy: str, time_obj: time | None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è."""
    if accuracy == "exact" and time_obj:
        return f"—Ç–æ—á–Ω–æ {time_obj.strftime('%H:%M')}"
    elif accuracy == "approx" and time_obj:
        return f"–ø—Ä–∏–º–µ—Ä–Ω–æ {time_obj.strftime('%H:%M')}"
    elif accuracy == "unknown":
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"


class AdditionalProfileForm(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    waiting_for_additional_name = State()
    waiting_for_additional_birth_date = State()
    waiting_for_additional_birth_city = State()
    waiting_for_additional_birth_city_confirm = State()
    waiting_for_additional_birth_time_accuracy = State()
    waiting_for_additional_birth_time_local = State()
    waiting_for_additional_birth_time_confirm = State()
    waiting_for_additional_birth_time_approx_confirm = State()
    waiting_for_additional_birth_time_unknown_confirm = State()


def build_additional_gender_kb(selected: str | None) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    –ï—Å–ª–∏ selected –∑–∞–¥–∞–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫ –∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.
    """
    female_text = ("‚úÖ " if selected == "female" else "") + "üë©üèª –ñ–µ–Ω—Å–∫–∏–π"
    male_text = ("‚úÖ " if selected == "male" else "") + "üë®üèº –ú—É–∂—Å–∫–æ–π"

    rows = [
        [
            InlineKeyboardButton(
                text=female_text, callback_data="additional_gender:female"
            )
        ],
        [
            InlineKeyboardButton(
                text=male_text, callback_data="additional_gender:male"
            )
        ],
    ]

    if selected:
        rows.append([
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="additional_gender:confirm"
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=rows)


async def start_additional_profile_creation(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–ø—Ä–æ—Å—É, –Ω–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É)
    user_id = callback.from_user.id if callback.from_user else 0
    
    # –ü–æ–ª—É—á–∞–µ–º message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    message = callback.message
    if not message:
        logger.error("callback.message is None in start_additional_profile_creation")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–∂–º–∏ /start üí´"
            )
            return

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    await state.set_state(AdditionalProfileForm.waiting_for_additional_name)
    await message.answer(
        "üë• –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        "üìù –ö–∞–∫ –∑–æ–≤—É—Ç —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–±–æ—Ä?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–º–∞, –ü–∞–ø–∞, –ú–æ—è –ó–∞–π–∫–∞, –î–æ—á—å, –°—ã–Ω, –î—Ä—É–≥"
    )


async def handle_additional_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(additional_name=name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {name}! üëã\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª:",
        reply_markup=build_additional_gender_kb(None)
    )


async def handle_additional_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = (message.text or "").strip()
    logger.info(f"üîç Received birth date input: '{text}' from user {message.from_user.id if message.from_user else 'unknown'}")
    
    try:
        dt = datetime.strptime(text, "%d.%m.%Y").date()
        logger.info(f"‚úÖ Successfully parsed date: {dt}")
    except ValueError as e:
        logger.warning(f"‚ùå Failed to parse date '{text}': {e}")
        await message.answer(
            "–û–π... —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ üòø\n"
            "üëáüèº –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.01.1998)"
        )
        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ
    await state.update_data(additional_pending_birth_date=dt.isoformat())
    logger.info(f"üíæ Saved birth date to state: {dt.isoformat()}")

    date_str = dt.strftime("%d.%m.%Y")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ",
                    callback_data="additional_birth_date:confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
                    callback_data="additional_birth_date:retry"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                    callback_data="additional_profile:cancel"
                )
            ]
        ]
    )

    await message.answer(
        f"üìÖ –ü—Ä–æ–≤–µ—Ä—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: {date_str}\n\n"
        "–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
        reply_markup=kb
    )


async def handle_additional_birth_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    city_input = (message.text or "").strip()
    if not city_input:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ‚úçÔ∏è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(additional_birth_city_input=city_input)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("üîç –ò—â—É –≥–æ—Ä–æ–¥...")

    try:
        # –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥
        geocode_result = await geocode_city_ru(city_input)

        if not geocode_result:
            await loading_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city_input}'. "
                "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ —É–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è –∏–ª–∏ Moscow, Russia"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(additional_geocode_result=geocode_result)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                        callback_data="additional_city:confirm"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
                        callback_data="additional_city:retry"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                        callback_data="additional_profile:cancel"
                    )
                ]
            ]
        )

        await loading_msg.edit_text(
            f"üèôÔ∏è –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥: {geocode_result['place_name']}\n\n"
            "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥?",
            reply_markup=kb
        )

    except GeocodingError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )
        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥


async def handle_additional_birth_time_accuracy_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.data or not callback.message:
        return
    
    data = callback.data.split(":")
    action = data[1]
    
    logger.info(f"üîç Time accuracy callback: action={action} from user {callback.from_user.id if callback.from_user else 'unknown'}")
    
    if action == "exact":
        # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
        await state.update_data(additional_birth_time_accuracy="exact")
        logger.info("‚úÖ Set time accuracy to 'exact'")
        await state.set_state(
            AdditionalProfileForm.waiting_for_additional_birth_time_local
        )
        try:
            await callback.message.edit_text(
                "‚è∞ –û—Ç–ª–∏—á–Ω–æ! –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ä–æ–¥–∏–ª—Å—è —á–µ–ª–æ–≤–µ–∫?\n\n"
                "–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 09:15"
            )
        except Exception:
            pass
    elif action == "approx":
        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        await state.update_data(additional_birth_time_accuracy="approx")
        logger.info("‚úÖ Set time accuracy to 'approx'")
        await state.set_state(
            AdditionalProfileForm.waiting_for_additional_birth_time_local
        )
        try:
            await callback.message.edit_text(
                "‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–æ!\n\n"
                "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 09:15"
            )
        except Exception:
            pass
    elif action == "unknown":
        # –í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        await state.update_data(additional_birth_time_accuracy="unknown")
        logger.info("‚úÖ Set time accuracy to 'unknown'")
        await state.set_state(
            AdditionalProfileForm.waiting_for_additional_birth_time_unknown_confirm
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                        callback_data="additional_time_unknown:confirm"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –í—Å—ë-—Ç–∞–∫–∏ –ø–æ–ø—Ä–æ–±—É—é –≤—Å–ø–æ–º–Ω–∏—Ç—å",
                        callback_data="additional_time_unknown:retry"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                        callback_data="additional_profile:cancel"
                    )
                ]
            ]
        )
        
        try:
            await callback.message.edit_text(
                "‚è∞ –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ –¥–æ–º–∞—Ö, "
                "–Ω–æ –±–µ–∑ –Ω–µ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ä–∞–∑–±–æ—Ä.\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ:",
                reply_markup=kb
            )
        except Exception:
            pass
    
    await callback.answer()


async def handle_additional_profile_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.message:
        return
    
    logger.info(f"üö´ User {callback.from_user.id if callback.from_user else 'unknown'} cancelled additional profile creation")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    try:
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, "
            "–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É'."
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, "
            "–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É'."
        )
    
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ")


async def handle_additional_birth_time_local(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = (message.text or "").strip()
    logger.info(f"handle_additional_birth_time_local called with text='{text}'")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    accuracy = state_data.get("additional_birth_time_accuracy", "exact")
    logger.info(f"Current accuracy: {accuracy}")

    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_obj = datetime.strptime(text, "%H:%M").time()
        logger.info(f"Parsed time: {time_obj}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(additional_pending_birth_time=time_obj.isoformat())
        logger.info(f"Saved time to state: {time_obj.isoformat()}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        time_str = time_obj.strftime("%H:%M")
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ",
                        callback_data="additional_birth_time:confirm"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
                        callback_data="additional_birth_time:retry"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                        callback_data="additional_profile:cancel"
                    )
                ]
            ]
        )

        accuracy_text = "—Ç–æ—á–Ω–æ–µ" if accuracy == "exact" else "–ø—Ä–∏–º–µ—Ä–Ω–æ–µ"
        await message.answer(
            f"‚è∞ –ü—Ä–æ–≤–µ—Ä—å {accuracy_text} –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}\n\n"
            "–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=kb
        )

    except ValueError as e:
        logger.warning(f"‚ùå Failed to parse time '{text}': {e}")
        await message.answer(
            "–û–π... —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ üòø\n"
            "üëáüèº –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11:05)"
        )
        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è


async def complete_additional_profile_creation(
    message: Message, state: FSMContext, user_id: int | None = None
):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –õ—É–Ω—ã.
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    
    Args:
        message: Message –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ—Ç—Å—è –∏–∑ message.from_user)
    """
    if user_id is None:
        user_id = message.from_user.id if message.from_user else 0
    
    if user_id == 0:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()
        return
        
    state_data = await state.get_data()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        logger.info(f"Starting profile creation for user_id={user_id}")
        logger.info(f"State data: {state_data.keys()}")
        
        name = state_data.get("additional_name")
        gender = state_data.get("additional_gender")
        birth_date_str = state_data.get("additional_pending_birth_date")
        geocode_result = state_data.get("additional_geocode_result")
        
        logger.info(f"üîç Profile data check: name={name}, gender={gender}, birth_date_str={birth_date_str}, geocode={geocode_result is not None}")
        birth_time_accuracy = state_data.get(
            "additional_birth_time_accuracy", "unknown"
        )
        birth_time_local = None

        logger.info(
            f"Profile data: name={name}, gender={gender}, "
            f"birth_date_str={birth_date_str}, accuracy={birth_time_accuracy}"
        )

        if not name or not gender or not birth_date_str or not geocode_result:
            logger.error(
                f"Missing data: name={bool(name)}, gender={bool(gender)}, "
                f"birth_date={bool(birth_date_str)}, geocode={bool(geocode_result)}"
            )
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            await state.clear()
            return

        birth_date = date.fromisoformat(birth_date_str)

        birth_time_str = state_data.get("additional_pending_birth_time")
        logger.info(f"üîç Birth time string from state: '{birth_time_str}'")
        if birth_time_str:
            birth_time_local = time.fromisoformat(birth_time_str)
            logger.info(f"‚úÖ Parsed birth time: {birth_time_local}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Ç–æ—á–Ω–æ–µ/–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω–æ
        if birth_time_accuracy in ["exact", "approx"] and not birth_time_local:
            logger.error(f"‚ùå Missing birth time for accuracy={birth_time_accuracy}")
            logger.error(f"‚ùå Full state data: {state_data}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ —Å /start"
            )
            await state.clear()
            return

        # –í—ã—á–∏—Å–ª—è–µ–º timezone –∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –î–û —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        birth_datetime_utc = None
        tzid = None
        tz_offset_minutes = None
        
        if birth_time_local and geocode_result:
            try:
                tz_result = resolve_timezone(
                    lat=geocode_result["lat"],
                    lon=geocode_result["lon"],
                    local_date=birth_date,
                    local_time=birth_time_local
                )
                if tz_result:
                    birth_datetime_utc = tz_result.birth_datetime_utc
                    tzid = tz_result.tzid
                    tz_offset_minutes = tz_result.offset_minutes
                    logger.info(
                        f"Timezone resolved: {tzid}, "
                        f"offset={tz_offset_minutes}, "
                        f"utc={birth_datetime_utc}"
                    )
            except Exception as tz_error:
                logger.error(f"Timezone resolve error: {tz_error}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        zodiac_sign_enum = zodiac_sign_ru_for_date(birth_date)
        logger.info(f"Zodiac sign enum: {zodiac_sign_enum}, value: {zodiac_sign_enum.value}")

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"Looking for user with telegram_id={user_id}")
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            main_user = result.scalar_one_or_none()

            if not main_user:
                logger.error(f"User not found for telegram_id={user_id}")
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            logger.info(f"Found user: user_id={main_user.user_id}")

            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –í–°–ï–ú–ò –ø–æ–ª—è–º–∏ —Å—Ä–∞–∑—É
            logger.info(
                f"Creating AdditionalProfile with all fields: "
                f"owner_user_id={main_user.user_id}, name={name}, "
                f"gender={gender}, zodiac={zodiac_sign_enum}"
            )
            
            additional_profile = AdditionalProfile(
                owner_user_id=main_user.user_id,
                full_name=name,
                gender=Gender(gender),
                birth_date=birth_date,
                birth_time_local=birth_time_local,
                birth_time_accuracy=birth_time_accuracy,
                birth_city_input=state_data.get("additional_birth_city_input"),
                birth_place_name=geocode_result["place_name"],
                birth_country_code=geocode_result["country_code"],
                birth_lat=geocode_result["lat"],
                birth_lon=geocode_result["lon"],
                birth_datetime_utc=birth_datetime_utc,
                tzid=tzid,
                tz_offset_minutes=tz_offset_minutes,
                zodiac_sign=zodiac_sign_enum,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º enum, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ
                is_active=True
            )
            
            logger.info("AdditionalProfile object created with all fields")

            session.add(additional_profile)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            try:
                await session.commit()
                logger.info("Additional profile committed successfully")
            except Exception as commit_error:
                logger.error(f"Commit error: {commit_error}", exc_info=True)
                await session.rollback()
                raise

            profile_id = additional_profile.profile_id

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {name} —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
            f"üèôÔ∏è –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {geocode_result['place_name']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {format_time_accuracy_message(birth_time_accuracy, birth_time_local)}\n\n"
            "üåô –°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è..."
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –õ—É–Ω—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        await start_moon_analysis_for_profile(message, profile_id)

        logger.info(
            f"–°–æ–∑–¥–∞–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å {profile_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. "
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {type(e).__name__}"
        )
        await state.clear()


async def get_additional_profile_astrology_data(profile_id: int) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    
    Args:
        profile_id: ID –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
    """
    async with get_session() as session:
        result = await session.execute(
            select(AdditionalProfile).where(AdditionalProfile.profile_id == profile_id)
        )
        profile = result.scalar_one_or_none()

        if not profile:
            logger.warning(f"Additional profile {profile_id} not found")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not all([
            profile.birth_date,
            profile.birth_time_local,
            profile.birth_lat is not None,
            profile.birth_lon is not None,
            profile.tz_offset_minutes is not None
        ]):
            logger.warning(f"Additional profile {profile_id} has incomplete birth data")
            return None

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        birth_date = profile.birth_date
        birth_time = profile.birth_time_local

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ, –Ω–æ –¥–ª—è mypy)
        assert birth_date is not None
        assert birth_time is not None
        assert profile.birth_lat is not None
        assert profile.birth_lon is not None
        assert profile.tz_offset_minutes is not None

        return {
            "day": birth_date.day,
            "month": birth_date.month,
            "year": birth_date.year,
            "hour": birth_time.hour,
            "minute": birth_time.minute,
            "lat": float(profile.birth_lat),
            "lon": float(profile.birth_lon),
            "tzone": float(profile.tz_offset_minutes) / 60.0,  # –ú–∏–Ω—É—Ç—ã->—á–∞—Å—ã
            "profile_id": profile.profile_id,
            "owner_user_id": profile.owner_user_id
        }


async def start_moon_analysis_for_profile(message: Message, profile_id: int):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –õ—É–Ω—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    
    Args:
        message: Message –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        profile_id: ID –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        logger.info(f"Starting moon analysis for additional profile {profile_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        profile_data = await get_additional_profile_astrology_data(profile_id)
        if not profile_data:
            logger.error(f"No profile data for profile_id={profile_id} - cannot start moon analysis")
            await message.answer(
                "‚ùå –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –õ—É–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n"
                "–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑ –õ—É–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            )
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from astrology_handlers import AstrologyAPIClient, ASTROLOGY_API_USER_ID, ASTROLOGY_API_KEY
        from astrology_handlers import extract_moon_data, format_moon_data_for_llm
        import json

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç AstrologyAPI
        api_client = AstrologyAPIClient(
            user_id=ASTROLOGY_API_USER_ID,
            api_key=ASTROLOGY_API_KEY
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç AstrologyAPI
        astrology_data = await api_client.get_western_horoscope(
            day=profile_data["day"],
            month=profile_data["month"],
            year=profile_data["year"],
            hour=profile_data["hour"],
            minute=profile_data["minute"],
            lat=profile_data["lat"],
            lon=profile_data["lon"],
            tzone=profile_data["tzone"],
            language="en"  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –õ—É–Ω—ã
        moon_data = extract_moon_data(astrology_data)
        formatted_moon_data = format_moon_data_for_llm(moon_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –õ—É–Ω—ã
        raw_content = (
            f"Moon Analysis Data:\n{formatted_moon_data}\n\n"
            f"Raw AstrologyAPI data: {astrology_data}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å profile_id
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è
            user_result = await session.execute(
                select(User).where(User.user_id == profile_data["owner_user_id"])
            )
            owner = user_result.scalar_one_or_none()
            
            if not owner:
                logger.error(f"Owner user {profile_data['owner_user_id']} not found")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            telegram_id = owner.telegram_id
            logger.info(f"Owner telegram_id: {telegram_id}")
            
            prediction = Prediction(
                user_id=profile_data["owner_user_id"],
                profile_id=profile_id,  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                planet=Planet.moon,
                prediction_type=PredictionType.free,
                content=raw_content,  # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
                llm_model="astrology_api",
                expires_at=None  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
            )

            session.add(prediction)
            await session.commit()

            prediction_id = prediction.prediction_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM —Å profile_id
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å profile_id –∏ telegram_id
            message_data = {
                "prediction_id": prediction_id,
                "user_id": telegram_id,  # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id!
                "profile_id": profile_id,  # –î–æ–±–∞–≤–ª—è–µ–º profile_id –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
                "timestamp": 0  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ queue_sender
            from queue_sender import get_queue_sender
            import aio_pika
            
            sender = await get_queue_sender()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å profile_id
            if not sender.channel:
                await sender.initialize()

            message_queue = aio_pika.Message(
                body=json.dumps(message_data).encode(),
                delivery_mode=aio_pika.DeliveryMode.PERSISTENT
            )

            await sender.channel.default_exchange.publish(
                message_queue,
                routing_key="moon_predictions"
            )

            logger.info(f"Moon prediction {prediction_id} for profile {profile_id} sent to queue")
            
        except Exception as e:
            logger.error(f"Failed to send moon prediction to queue: {e}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω
        await message.answer(
            "üåô –ê–Ω–∞–ª–∏–∑ –õ—É–Ω—ã –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–æ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, "
            "—è –ø—Ä–∏—à–ª—é –µ–≥–æ —Ç–µ–±–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
        )

        logger.info(f"Moon analysis started for additional profile {profile_id}")

    except Exception as e:
        logger.error(f"Error starting moon analysis for profile {profile_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –õ—É–Ω—ã. "
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

async def handle_additional_gender_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.data or not callback.message:
        return
        
    data = callback.data.split(":")
    action = data[1]

    if action in ["female", "male"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(additional_gender_temp=action)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª–æ–º
        try:
            await callback.message.edit_text(
                "üë§ –í—ã–±–µ—Ä–∏ –ø–æ–ª:",
                reply_markup=build_additional_gender_kb(action)
            )
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass
        await callback.answer()
        
    elif action == "confirm":
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        state_data = await state.get_data()
        gender = state_data.get("additional_gender_temp")
        
        if not gender:
            await callback.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª —Å–Ω–∞—á–∞–ª–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
        await state.update_data(additional_gender=gender)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        await state.set_state(AdditionalProfileForm.waiting_for_additional_birth_date)
        try:
            await callback.message.edit_text(
                "üìÜ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                "–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.04.1987"
            )
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass
        await callback.answer()


async def handle_additional_birth_date_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.data or not callback.message:
        return
        
    data = callback.data.split(":")
    action = data[1]
    
    logger.info(f"üîç Birth date callback: action={action} from user {callback.from_user.id if callback.from_user else 'unknown'}")

    if action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        logger.info("‚úÖ Birth date confirmed, transitioning to city input")
        await state.set_state(AdditionalProfileForm.waiting_for_additional_birth_city)
        try:
            await callback.message.edit_text(
                "üèôÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            )
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass
    elif action == "retry":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã
        try:
            await callback.message.edit_text(
                "üìÜ –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                "–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.04.1987"
            )
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass

    await callback.answer()


async def handle_additional_birth_city_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.data or not callback.message:
        return
        
    data = callback.data.split(":")
    action = data[1]

    if action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ—Ä–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(
            AdditionalProfileForm.waiting_for_additional_birth_time_accuracy
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üëçüèº –ó–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                        callback_data="additional_timeacc:exact"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü§èüèº –ó–Ω–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è",
                        callback_data="additional_timeacc:approx"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üëéüèº –ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è –≤–æ–æ–±—â–µ",
                        callback_data="additional_timeacc:unknown"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ",
                        callback_data="additional_profile:cancel"
                    )
                ]
            ]
        )
        
        try:
            await callback.message.edit_text(
                "–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è ü™Ñ\n\n"
                "üï∞ –ü–æ–¥—Å–∫–∞–∂–∏, –∑–Ω–∞–µ—à—å –ª–∏ —Ç—ã –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?",
                reply_markup=kb
            )
        except Exception:
            pass
    elif action == "retry":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞
        await state.set_state(AdditionalProfileForm.waiting_for_additional_birth_city)
        try:
            await callback.message.edit_text(
                "üèôÔ∏è –ù–∞–ø–∏—à–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            )
        except Exception:
            pass

    await callback.answer()


async def handle_additional_birth_time_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.data or not callback.message:
        return
        
    data = callback.data.split(":")
    action = data[1]

    if action == "confirm":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        user_id = callback.from_user.id if callback.from_user else 0
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
        state_data = await state.get_data()
        logger.info(f"Confirming birth time, state keys: {list(state_data.keys())}")
        logger.info(f"additional_pending_birth_time in state: {state_data.get('additional_pending_birth_time')}")
        
        if callback.message:
            await complete_additional_profile_creation(
                callback.message, state, user_id
            )
    elif action == "retry":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        state_data = await state.get_data()
        accuracy = state_data.get("additional_birth_time_accuracy", "exact")
        accuracy_text = "—Ç–æ—á–Ω–æ–µ" if accuracy == "exact" else "–ø—Ä–∏–º–µ—Ä–Ω–æ–µ"

        await state.set_state(
            AdditionalProfileForm.waiting_for_additional_birth_time_local
        )
        try:
            await callback.message.edit_text(
                f"‚è∞ –ù–∞–ø–∏—à–∏ {accuracy_text} –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 09:15"
            )
        except Exception:
            pass

    await callback.answer()


async def handle_additional_time_unknown_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not callback.data or not callback.message:
        return
        
    data = callback.data.split(":")
    action = data[1]

    if action == "confirm":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        user_id = callback.from_user.id if callback.from_user else 0
        if callback.message:
            await complete_additional_profile_creation(
                callback.message, state, user_id
            )
    elif action == "retry":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(
            AdditionalProfileForm.waiting_for_additional_birth_time_accuracy
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üëçüèº –ó–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                        callback_data="additional_timeacc:exact"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü§èüèº –ó–Ω–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è",
                        callback_data="additional_timeacc:approx"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üëéüèº –ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è –≤–æ–æ–±—â–µ",
                        callback_data="additional_timeacc:unknown"
                    )
                ]
            ]
        )
        
        try:
            await callback.message.edit_text(
                "‚è∞ –•–æ—Ä–æ—à–æ! –¢–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"
                "–ó–Ω–∞–µ—à—å –ª–∏ —Ç—ã –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?\n\n"
                "‚Ä¢ –ù–∞–ø–∏—à–∏ '–¢–æ—á–Ω–æ –∑–Ω–∞—é' - –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "‚Ä¢ –ù–∞–ø–∏—à–∏ '–ü—Ä–∏–º–µ—Ä–Ω–æ' - –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "‚Ä¢ –ù–∞–ø–∏—à–∏ '–ù–µ –∑–Ω–∞—é' - –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
        except Exception:
            pass

    await callback.answer()
