import hashlib
import hmac
import logging
import uuid
from typing import Dict, Any
from aiogram import Bot
from yookassa import Configuration, Payment
from config import (
    PAYMENT_SHOP_ID, PAYMENT_SECRET_KEY, 
    PAYMENT_TEST_AMOUNT, PAYMENT_CURRENCY
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = PAYMENT_SHOP_ID
Configuration.secret_key = PAYMENT_SECRET_KEY

logger = logging.getLogger(__name__)


class PaymentHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –ÆKassa"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.shop_id = PAYMENT_SHOP_ID
        self.secret_key = PAYMENT_SECRET_KEY
        self.test_amount = PAYMENT_TEST_AMOUNT
        self.currency = PAYMENT_CURRENCY
    
    def create_payment_data(self, user_id: int, planet: str, description: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞"""
        return {
            "amount": {
                "value": f"{self.test_amount / 100:.2f}",
                "currency": self.currency
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/NeyroAstroBot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": str(user_id),
                "planet": planet
            }
        }
    
    async def create_payment(
        self, payment_data: Dict[str, Any]
    ) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa API"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å ID: {payment_id}")
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
            logger.info(f"Configuration account_id: {Configuration.account_id}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
            payment = Payment.create({
                "amount": payment_data["amount"],
                "confirmation": payment_data["confirmation"],
                "capture": payment_data["capture"],
                "description": payment_data["description"],
                "metadata": payment_data["metadata"]
            }, payment_id)
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment.id}")
            logger.info(f"URL –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment.confirmation.confirmation_url}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ URL, —Ç–∞–∫ –∏ payment_id
            return {
                "payment_url": payment.confirmation.confirmation_url,
                "payment_id": payment.id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            fallback_url = self.create_payment_url(payment_data)
            return {
                "payment_url": fallback_url,
                "payment_id": None  # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π ID –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
            }
    
    def create_payment_url(self, payment_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa API
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        description = payment_data['description']
        return (
            f"https://yoomoney.ru/checkout/payments/v2/checkout?"
            f"shopId={self.shop_id}&sum={self.test_amount}&"
            f"quickpay-form=shop&paymentType=AC&targets={description}"
        )
    
    def verify_webhook(self, body: str, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook –æ—Ç –ÆKassa"""
        try:
            expected_signature = hmac.new(
                self.secret_key.encode('utf-8'),
                body.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            return hmac.compare_digest(signature, expected_signature)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏ webhook: {e}")
            return False
    
    async def process_payment_webhook(self, webhook_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç –ÆKassa"""
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook: {webhook_data}")
            
            event = webhook_data.get('event')
            logger.info(f"–°–æ–±—ã—Ç–∏–µ: {event}")
            
            if event == 'payment.succeeded':
                payment = webhook_data.get('object', {})
                logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment}")
                
                metadata = payment.get('metadata', {})
                logger.info(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
                
                user_id = int(metadata.get('user_id', 0))
                planet = metadata.get('planet', '')
                
                logger.info(f"User ID: {user_id}, Planet: {planet}")
                
                if user_id and planet:
                    await self._grant_access(user_id, planet)
                    return True
                else:
                    logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, planet={planet}")
            else:
                logger.info(f"–°–æ–±—ã—Ç–∏–µ {event} –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    async def _grant_access(self, user_id: int, planet: str):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–±–æ—Ä—É –ø–ª–∞–Ω–µ—Ç—ã"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.
            await self.bot.send_message(
                user_id,
                f"üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–±–æ—Ä—É {planet}!\n\n"
                f"–†–∞–∑–±–æ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç."
            )
            logger.info(
                f"–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø–ª–∞–Ω–µ—Ç—ã {planet}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py)
payment_handler = None


def init_payment_handler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"""
    global payment_handler
    payment_handler = PaymentHandler(bot)
    return payment_handler
