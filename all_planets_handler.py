"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã" - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–∞–∑–±–æ—Ä–æ–≤.

–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É:
1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç
2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤: –°–æ–ª–Ω—Ü–µ -> –ú–µ—Ä–∫—É—Ä–∏–π -> –í–µ–Ω–µ—Ä–∞ -> –ú–∞—Ä—Å
3. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ —Å "–°–ª–µ–¥—É—é—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞" –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –ø–ª–∞–Ω–µ—Ç
"""

import logging
from typing import Optional
from datetime import datetime, timezone

from aiogram import Bot
from aiogram.types import (
    CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from sqlalchemy import select

from db import get_session
from models import (
    Prediction, PlanetPayment, PaymentStatus, PaymentType
)
from payment_handler import PaymentHandler
from queue_sender import get_queue_sender
from astrology_handlers import (
    start_sun_analysis, start_mercury_analysis,
    start_venus_analysis, start_mars_analysis
)

logger = logging.getLogger(__name__)

# –ü–æ—Ä—è–¥–æ–∫ –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞
PLANET_ORDER = ["sun", "mercury", "venus", "mars"]
PLANET_EMOJIS = {
    "sun": "‚òÄÔ∏è",
    "mercury": "‚òøÔ∏è",
    "venus": "‚ôÄÔ∏è",
    "mars": "‚ôÇÔ∏è"
}
PLANET_NAMES = {
    "sun": "–°–æ–ª–Ω—Ü–µ",
    "mercury": "–ú–µ—Ä–∫—É—Ä–∏–π",
    "venus": "–í–µ–Ω–µ—Ä–∞",
    "mars": "–ú–∞—Ä—Å"
}


class AllPlanetsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ '–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã'"""

    def __init__(self, bot: Bot, payment_handler: PaymentHandler):
        self.bot = bot
        self.payment_handler = payment_handler
        self.queue_sender = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.queue_sender = await get_queue_sender()
        logger.info("AllPlanetsHandler initialized")

    async def handle_payment_request(self, callback: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã"""
        await callback.answer()
        cb_msg = callback.message
        user_id = callback.from_user.id

        if self.payment_handler is None:
            await cb_msg.answer(
                "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data="explore_all_planets"
                            )
                        ]
                    ]
                )
            )
            return

        try:
            logger.info(
                f"üåå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_data = self.payment_handler.create_payment_data(
                user_id=user_id,
                planet="all_planets",
                description="–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–±–æ—Ä—ã –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç"
            )

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_result = await self.payment_handler.create_payment(
                payment_data
            )
            
            logger.info(f"üîç Payment result type: {type(payment_result)}")
            logger.info(f"üîç Payment result: {payment_result}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(payment_result, dict) and payment_result.get("success"):
                payment_url = payment_result.get("payment_url")
                payment_id = payment_result.get("payment_id")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
                if payment_id:
                    await self._save_payment_to_db(user_id, payment_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                if cb_msg:
                    await cb_msg.answer(
                        "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã\n\n"
                        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5‚ÇΩ (—Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞)\n\n"
                        "üéÅ –ë–æ–Ω—É—Å: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
                        "üìã –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä—ã:\n"
                        "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ - —ç–Ω–µ—Ä–≥–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞\n"
                        "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π - —Ä–µ—á—å, –º—ã—à–ª–µ–Ω–∏–µ, –æ–±—É—á–µ–Ω–∏–µ\n"
                        "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞ - –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã, –∏–∑–æ–±–∏–ª–∏–µ\n"
                        "‚ôÇÔ∏è –ú–∞—Ä—Å - –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–∏–ª–∞ –≤–æ–ª–∏, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
                        "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 5‚ÇΩ",
                                        url=payment_url
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text="üîô –ù–∞–∑–∞–¥",
                                        callback_data="explore_all_planets"
                                    )
                                ]
                            ]
                        )
                    )

                logger.info(
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment_id}"
                )
            else:
                error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                if isinstance(payment_result, dict):
                    error_msg = payment_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                else:
                    error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(payment_result)}"
                
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
                
                if cb_msg:
                    await cb_msg.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_msg}",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üîô –ù–∞–∑–∞–¥",
                                        callback_data="explore_all_planets"
                                    )
                                ]
                            ]
                        )
                    )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã: {e}"
            )
            if cb_msg:
                await cb_msg.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="üîô –ù–∞–∑–∞–¥",
                                    callback_data="explore_all_planets"
                                )
                            ]
                        ]
                    )
                )

    async def handle_payment_success(self, user_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç"""
        try:
            logger.info(
                f"üåå –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç –¥–ª—è "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
            await self._update_payment_status(user_id)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–±–æ—Ä –ø–µ—Ä–≤–æ–π –ø–ª–∞–Ω–µ—Ç—ã (–°–æ–ª–Ω—Ü–µ)
            await self._start_planet_analysis(user_id, "sun")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")

    async def handle_next_planet(self, callback: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞'"""
        await callback.answer()
        cb_msg = callback.message
        user_id = callback.from_user.id

        try:
            logger.info(f"üîç Next planet button pressed by user {user_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–ª–∞–Ω–µ—Ç—É
            next_planet = await self._get_next_planet(user_id)
            logger.info(f"üîç Next planet determined: {next_planet}")

            if next_planet:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã
                logger.info(f"üîç Starting analysis for planet: {next_planet}")
                await self._start_planet_analysis(user_id, next_planet)
            else:
                # –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                if cb_msg:
                    await cb_msg.answer(
                        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                        "‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–±–æ—Ä—ã "
                        "–ø–æ –≤—Å–µ–º –ø–ª–∞–Ω–µ—Ç–∞–º!\n\n"
                        "üîÆ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤–∞—à–µ–π "
                        "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã.\n\n"
                        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π "
                        "–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                                        callback_data="get_recommendations"
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                        callback_data="back_to_menu"
                                    )
                                ]
                            ]
                        )
                    )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–ª–∞–Ω–µ—Ç–µ: {e}")
            if cb_msg:
                await cb_msg.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data="back_to_menu"
                                )
                            ]
                        ]
                    )
                )

    async def _save_payment_to_db(self, user_id: int, payment_id: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î"""
        async with get_session() as session:
            payment = PlanetPayment(
                user_id=user_id,
                planet=None,  # –î–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç
                payment_type=PaymentType.all_planets,
                external_payment_id=payment_id,
                amount_kopecks=500,  # 5‚ÇΩ –≤ –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                status=PaymentStatus.pending,
                created_at=datetime.now(timezone.utc)
            )
            session.add(payment)
            await session.commit()
            logger.info(f"üíæ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {payment_id}")

    async def _update_payment_status(self, user_id: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 'completed'"""
        async with get_session() as session:
            result = await session.execute(
                select(PlanetPayment).where(
                    PlanetPayment.user_id == user_id,
                    PlanetPayment.payment_type == PaymentType.all_planets,
                    PlanetPayment.status == PaymentStatus.pending
                )
            )
            payment = result.scalar_one_or_none()

            if payment:
                payment.status = PaymentStatus.completed
                payment.completed_at = datetime.now(timezone.utc)
                await session.commit()
                logger.info(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )

    async def _start_planet_analysis(self, user_id: int, planet: str) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã"""
        try:
            logger.info(
                f"üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ {planet} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await self.bot.send_message(
                user_id,
                f"{PLANET_EMOJIS[planet]} {PLANET_NAMES[planet]}\n\n"
                f"üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä...\n\n"
                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑
            if planet == "sun":
                astrology_data = await start_sun_analysis(user_id)
            elif planet == "mercury":
                astrology_data = await start_mercury_analysis(user_id)
            elif planet == "venus":
                astrology_data = await start_venus_analysis(user_id)
            elif planet == "mars":
                astrology_data = await start_mars_analysis(user_id)
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞: {planet}")
                return

            if astrology_data:
                logger.info(
                    f"‚úÖ –ê–Ω–∞–ª–∏–∑ {planet} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
            else:
                logger.error(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ {planet} –¥–ª—è "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞ {planet}: {e}")

    async def _get_next_planet(self, telegram_id: int) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–ª–∞–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info(f"üîç Getting next planet for user {telegram_id}")
            
            async with get_session() as session:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id –ø–æ telegram_id
                from models import User
                user_result = await session.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                user = user_result.scalar_one_or_none()
                if not user:
                    logger.warning(f"üîç User not found for telegram_id {telegram_id}")
                    return None
                
                logger.info(f"üîç Found user with internal id: {user.user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
                result = await session.execute(
                    select(Prediction).where(
                        Prediction.user_id == user.user_id,
                        (Prediction.sun_analysis.isnot(None)) |
                        (Prediction.mercury_analysis.isnot(None)) |
                        (Prediction.venus_analysis.isnot(None)) |
                        (Prediction.mars_analysis.isnot(None))
                    )
                )
                completed_predictions = result.scalars().all()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–ª–∞–Ω–µ—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                completed_planets = set()
                for prediction in completed_predictions:
                    if prediction.sun_analysis:
                        completed_planets.add("sun")
                    if prediction.mercury_analysis:
                        completed_planets.add("mercury")
                    if prediction.venus_analysis:
                        completed_planets.add("venus")
                    if prediction.mars_analysis:
                        completed_planets.add("mars")

                logger.info(f"üîç Completed planets: {completed_planets}")
                logger.info(f"üîç Planet order: {PLANET_ORDER}")

                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –ø–ª–∞–Ω–µ—Ç—É
                for planet in PLANET_ORDER:
                    if planet not in completed_planets:
                        logger.info(f"üîç Next planet found: {planet}")
                        return planet

                logger.info(f"üîç All planets completed")
                return None  # –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã: {e}")
            return None

    def create_planet_buttons(self, planet: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–ª–∞–Ω–µ—Ç—ã"""
        buttons = [
            [
                InlineKeyboardButton(
                    text="üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    callback_data=f"get_{planet}_recommendations"
                )
            ]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞" –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –∫—Ä–æ–º–µ –ú–∞—Ä—Å–∞
        if planet != "mars":
            buttons.append([
                InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞",
                    callback_data="next_planet"
                )
            ])

        buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ])

        return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
_all_planets_handler = None


def init_all_planets_handler(
    bot: Bot, payment_handler: PaymentHandler
) -> AllPlanetsHandler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç"""
    global _all_planets_handler
    _all_planets_handler = AllPlanetsHandler(bot, payment_handler)
    return _all_planets_handler


def get_all_planets_handler() -> Optional[AllPlanetsHandler]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç"""
    return _all_planets_handler
