"""
–í–æ—Ä–∫–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã.

–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenRouter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π,
—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
"""

import asyncio
import json
import logging
import os
from typing import Dict, Any, Optional

import aio_pika
import aiohttp
from sqlalchemy import select

from db import get_session, init_engine, dispose_engine
from models import Prediction, User, Planet, PredictionType, AdditionalProfile
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RABBITMQ_URL = os.getenv("RABBITMQ_URL", "amqp://astro_user:astro_password_123@31.128.40.111:5672/")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
QUEUE_NAME = "recommendations"
BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
if not OPENROUTER_API_KEY:
    logger.warning("OPENROUTER_API_KEY not set! LLM processing will be disabled.")

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
RECOMMENDATIONS_PROMPT = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Ä–∞–∫—Ç–∏–∫. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª—É–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏. 

–í–ê–ñ–ù–û: –ü–∏—à–∏ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! –ù–∏–∫–∞–∫–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤!

–°–æ–∑–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

üåô –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ü–†–ê–ö–¢–ò–ö–ò:
‚Ä¢ [3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è]

üè† –î–û–ú–ê–®–ù–Ø–Ø –û–ë–°–¢–ê–ù–û–í–ö–ê:
‚Ä¢ [2-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Å—Ä–µ–¥—ã]

üòå –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ì–ò–ì–ò–ï–ù–ê:
‚Ä¢ [3-4 —Å–ø–æ—Å–æ–±–∞ —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é]

üí§ –°–û–ù –ò –û–¢–î–´–•:
‚Ä¢ [2-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é]

üçÉ –ü–ò–¢–ê–ù–ò–ï –ò –†–ò–¢–ú–´:
‚Ä¢ [2-3 —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –±–∏–æ—Ä–∏—Ç–º–∞–º]

üë• –û–¢–ù–û–®–ï–ù–ò–Ø:
‚Ä¢ [2-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π]

–ü–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞–ø–∏—à–∏ —Ä–∞–∑–¥–µ–ª:

‚ú® –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ê–ö–¢–ò–ö:
–ï—Å–ª–∏ –±—É–¥–µ—à—å —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º, {user_name}, —Ç—ã –ø–æ–ª—É—á–∏—à—å: [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è]

–ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏. –£—á–∏—Ç—ã–≤–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–∞ –ø—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.

–†–∞–∑–±–æ—Ä –õ—É–Ω—ã:
{moon_analysis}

–ò–º—è: {user_name}
–ü–æ–ª: {user_gender}"""


class OpenRouterClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.url = OPENROUTER_URL
    
    async def generate_recommendations(
        self, 
        moon_analysis: str, 
        user_name: str, 
        user_gender: str
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter
        
        Args:
            moon_analysis: –†–∞–∑–±–æ—Ä –õ—É–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_gender: –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
        logger.info(f"Recommendations LLM Input - User: {user_name}, Gender: {user_gender}")
        logger.info(f"Recommendations LLM Input - Moon analysis length: {len(moon_analysis)} characters")
        logger.info(f"Recommendations LLM Input - Moon analysis preview: {moon_analysis[:300]}...")
        
        prompt = RECOMMENDATIONS_PROMPT.format(
            moon_analysis=moon_analysis,
            user_name=user_name,
            user_gender=user_gender
        )
        
        logger.info(f"Recommendations LLM Input - Full prompt length: {len(prompt)} characters")
        
        payload = {
            "model": "deepseek/deepseek-chat-v3.1",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 2500,
            "temperature": 0.7
        }
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://astro-bot.com",
            "X-Title": "Astro Bot"
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                logger.info(f"Sending recommendations request for {user_name}...")
                start_time = asyncio.get_event_loop().time()
                
                async with session.post(
                    self.url,
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=180)
                ) as response:
                    end_time = asyncio.get_event_loop().time()
                    logger.info(f"Recommendations response time: {end_time - start_time:.2f}s")
                    
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"OpenRouter recommendations response received for {user_name}")
                        return {
                            "success": True,
                            "content": result["choices"][0]["message"]["content"],
                            "usage": result.get("usage", {}),
                            "model": result.get("model", "unknown")
                        }
                    else:
                        error_text = await response.text()
                        logger.error(f"OpenRouter error {response.status}: {error_text}")
                        return {
                            "success": False,
                            "error": f"API error: {response.status} - {error_text}"
                        }
                        
            except asyncio.TimeoutError:
                logger.error(f"Recommendations request timeout for {user_name}")
                return {
                    "success": False,
                    "error": "Request timeout - try again later"
                }
            except Exception as e:
                logger.error(f"OpenRouter request failed: {e}")
                return {
                    "success": False,
                    "error": str(e)
                }


class RecommendationsWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    def __init__(self):
        self.openrouter_client = None
        self.connection = None
        self.channel = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
        if OPENROUTER_API_KEY:
            self.openrouter_client = OpenRouterClient(OPENROUTER_API_KEY)
            logger.info("OpenRouter client initialized")
        else:
            logger.warning("OpenRouter API key not set - LLM processing disabled")
            self.openrouter_client = None
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
        self.connection = await aio_pika.connect_robust(RABBITMQ_URL)
        self.channel = await self.connection.channel()
        
        # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        await self.channel.declare_queue(QUEUE_NAME, durable=True)
        
        logger.info("Recommendations worker initialized successfully")
    
    async def get_user_info(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.warning(f"User with telegram_id {user_id} not found")
                return None
            
            return {
                "user_id": user.user_id,
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "gender": user.gender.value if user.gender else "unknown"
            }
    
    async def get_additional_profile_info(self, profile_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑ –ë–î"""
        async with get_session() as session:
            result = await session.execute(
                select(AdditionalProfile).where(AdditionalProfile.profile_id == profile_id)
            )
            profile = result.scalar_one_or_none()
            
            if not profile:
                logger.warning(f"Additional profile with ID {profile_id} not found")
                return None
            
            return {
                "profile_id": profile.profile_id,
                "owner_user_id": profile.owner_user_id,
                "full_name": profile.full_name,
                "gender": profile.gender.value if profile.gender else "unknown"
            }
    
    async def save_recommendations(
        self, 
        prediction_id: int, 
        recommendations: str,
        llm_model: str,
        tokens_used: int,
        temperature: float = 0.7,
        profile_id: Optional[int] = None
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            result = await session.execute(
                select(Prediction).where(Prediction.prediction_id == prediction_id)
            )
            prediction = result.scalar_one_or_none()
            
            if not prediction:
                logger.error(f"Prediction {prediction_id} not found")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations_prediction = Prediction(
                user_id=prediction.user_id,
                profile_id=profile_id,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É profile_id
                planet=Planet.moon,  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –õ—É–Ω–µ
                prediction_type=PredictionType.free,
                recommendations=recommendations,
                llm_model=llm_model,
                llm_tokens_used=tokens_used,
                llm_temperature=temperature,
                expires_at=None
            )
            
            session.add(recommendations_prediction)
            await session.commit()
            
            logger.info(f"Recommendations saved for prediction {prediction_id}, profile_id: {profile_id}")
            return True
    
    async def send_telegram_message(
        self, 
        chat_id: int, 
        text: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
        url = f"{BOT_API_URL}/sendMessage"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã",
                        "callback_data": "explore_other_areas"
                    }
                ],
                # [
                #     {
                #         "text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                #         "callback_data": "back_to_menu"
                #     }
                # ]
            ]
        }
        
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
            "reply_markup": keyboard
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    url,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return True
                        else:
                            logger.error(f"Telegram API error: {result}")
                            return False
                    else:
                        error_text = await response.text()
                        logger.error(f"HTTP error {response.status}: {error_text}")
                        return False
                        
            except asyncio.TimeoutError:
                logger.error("Telegram API request timeout")
                return False
            except Exception as e:
                logger.error(f"Telegram API request failed: {e}")
                return False
    
    def format_recommendations_message(self, recommendations: str, user_name: str, profile_name: Optional[str] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
        if profile_name:
            message = f"üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {profile_name}\n\n"
        else:
            message = f"üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {user_name}\n\n"
        
        message += recommendations
        
        return message
    
    async def process_recommendation(self, message_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        prediction_id = message_data.get("prediction_id")
        user_id = message_data.get("user_telegram_id")
        moon_analysis = message_data.get("moon_analysis")
        profile_id = message_data.get("profile_id")  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        
        if not prediction_id or not user_id or not moon_analysis:
            logger.error(f"Invalid message data: {message_data}")
            return
        
        logger.info(f"Processing recommendations for prediction {prediction_id}, user {user_id}, profile_id: {profile_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await self.get_user_info(user_id)
        if not user_info:
            logger.error(f"User with telegram_id {user_id} not found")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.openrouter_client:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏ –ø–æ–ª –¥–ª—è LLM –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
            if profile_id:
                # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                profile_info = await self.get_additional_profile_info(profile_id)
                if not profile_info:
                    logger.error(f"Additional profile {profile_id} not found")
                    return
                llm_user_name = profile_info["full_name"] or "–î—Ä—É–≥"
                llm_user_gender = profile_info["gender"]
                logger.info(f"Using additional profile data for recommendations: {llm_user_name}, gender: {llm_user_gender}")
            else:
                # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                llm_user_name = user_info["first_name"] or "–î—Ä—É–≥"
                llm_user_gender = user_info["gender"]
                logger.info(f"Using main user data for recommendations: {llm_user_name}, gender: {llm_user_gender}")
            
            llm_result = await self.openrouter_client.generate_recommendations(
                moon_analysis=moon_analysis,
                user_name=llm_user_name,
                user_gender=llm_user_gender
            )
            
            if not llm_result["success"]:
                logger.error(f"LLM generation failed: {llm_result['error']}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑—É
            await self.save_recommendations(
                prediction_id=prediction_id,
                recommendations=llm_result["content"],
                llm_model=llm_result.get("model", "deepseek-chat-v3.1"),
                tokens_used=llm_result.get("usage", {}).get("total_tokens", 0),
                temperature=0.7,
                profile_id=profile_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                profile_name = None
                if profile_id and profile_info:
                    profile_name = profile_info["full_name"]
                
                message = self.format_recommendations_message(
                    recommendations=llm_result["content"],
                    user_name=user_info["first_name"] or "–î—Ä—É–≥",
                    profile_name=profile_name
                )
                
                success = await self.send_telegram_message(
                    chat_id=user_id,
                    text=message
                )
                
                if success:
                    logger.info(f"Recommendations sent to user {user_id}")
                else:
                    logger.error(f"Failed to send recommendations to user {user_id}")
                    
            except Exception as e:
                logger.error(f"Error sending recommendations to user: {e}")
        else:
            logger.info(f"LLM processing skipped for recommendations - no API key")
        
        logger.info(f"Recommendations for prediction {prediction_id} processed successfully")
    
    async def start_consuming(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if not self.channel:
            raise RuntimeError("Worker not initialized")
        
        queue = await self.channel.declare_queue(QUEUE_NAME, durable=True)
        
        async def process_message(message: aio_pika.IncomingMessage):
            async with message.process():
                try:
                    message_data = json.loads(message.body.decode())
                    await self.process_recommendation(message_data)
                except Exception as e:
                    logger.error(f"Error processing message: {e}")
        
        await queue.consume(process_message)
        logger.info(f"Started consuming from queue {QUEUE_NAME}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä–∞"""
        if self.connection:
            await self.connection.close()
        logger.info("Recommendations worker stopped")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
    logger.info("Starting recommendations worker...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    init_engine()
    
    worker = RecommendationsWorker()
    
    try:
        await worker.initialize()
        await worker.start_consuming()
        
        # –î–µ—Ä–∂–∏–º –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        logger.info("Recommendations worker is running. Press Ctrl+C to stop.")
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    except Exception as e:
        logger.error(f"Worker error: {e}")
    finally:
        await worker.stop()
        await dispose_engine()
        logger.info("Recommendations worker shutdown complete")


if __name__ == "__main__":
    asyncio.run(main())
