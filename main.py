import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    User as TgUser,
)
from aiogram.fsm.context import FSMContext
from typing import cast, Optional
from db import (
    init_engine,
    dispose_engine,
    ensure_gender_enum,
    ensure_birth_date_nullable,
    ensure_zodiac_enum_ru,
    ensure_planet_enum,
    ensure_prediction_type_enum,
    ensure_payment_type_enum,
    ensure_payment_status_enum,
)
from models import create_all
from sqlalchemy.ext.asyncio import AsyncEngine
from db import get_session
from models import (
    User as DbUser,
    Gender,
    ZodiacSignRu,
    Prediction,
    Planet,
    PredictionType,
)
from sqlalchemy import select
from datetime import datetime, timezone, date
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, LOG_LEVEL, LOG_FORMAT
from geocoding import geocode_city_ru, GeocodingError
from timezone_utils import resolve_timezone, format_utc_offset
from astrology_handlers import (
    start_moon_analysis,
    check_existing_moon_prediction
)
from handlers.recommendations_handler import handle_get_recommendations
from handlers.sun_recommendations_handler import handle_get_sun_recommendations
from handlers.mercury_recommendations_handler import (
    handle_get_mercury_recommendations
)
from handlers.venus_recommendations_handler import (
    handle_get_venus_recommendations
)
from handlers.mars_recommendations_handler import (
    handle_get_mars_recommendations
)
from handlers.ask_question_handler import handle_ask_question
from handlers.support_handler import SupportForm
from handlers.additional_profile_handler import (
    AdditionalProfileForm,
    start_additional_profile_creation,
    handle_additional_name,
    handle_additional_birth_date,
    handle_additional_birth_city,
    handle_additional_birth_time_accuracy_callback,
    handle_additional_birth_time_local,
    handle_additional_gender_callback,
    handle_additional_birth_date_callback,
    handle_additional_birth_city_callback,
    handle_additional_birth_time_callback,
    handle_additional_profile_cancel,
    handle_additional_time_unknown_callback,
)
from payment_handler import init_payment_handler
from all_planets_handler import init_all_planets_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, LOG_LEVEL), format=LOG_FORMAT)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞
if BOT_TOKEN in ["YOUR_BOT_TOKEN_HERE", "–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å"]:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    print("–ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    print("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è payment_handler
payment_handler = None


@dp.message(Command("lk"))
async def cmd_lk(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lk - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    await state.clear()
    await show_personal_cabinet(message)


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    await state.clear()
    
    # –°–æ–∑—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    tg_user = cast(TgUser, message.from_user)
    lang = tg_user.language_code or "ru"
    now = datetime.now(timezone.utc)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == tg_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            user = DbUser(
                telegram_id=tg_user.id,
                username=tg_user.username,
                first_name=tg_user.first_name,
                last_name=tg_user.last_name,
                lang=lang,
                joined_at=now,
                last_seen_at=now,
            )
            session.add(user)
        else:
            # –û–±–Ω–æ–≤–∏–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏ –æ—Ç–º–µ—Ç–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            user.username = tg_user.username
            user.first_name = tg_user.first_name
            user.last_name = tg_user.last_name
            user.lang = lang or user.lang
            user.last_seen_at = now

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã
    has_moon_analysis = await check_existing_moon_prediction(tg_user.id)

    if has_moon_analysis:
        # –ï—Å–ª–∏ —Ä–∞–∑–±–æ—Ä –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.id} —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ä–∞–∑–±–æ—Ä–æ–º "
            "–ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )
    else:
        # –ï—Å–ª–∏ —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            (
                "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–ª–∏—Ç üêà‚Äç‚¨õ\n"
                "–Ø —É–º–Ω—ã–π –±–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
                "ü§ñüîÆ\n\n"
                "ü´Ç –°—Ç–∞–Ω—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –∞—Å—Ç—Ä–æ-–ø–æ–º–æ—â–Ω–∏–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å "
                "–ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
                "ü™ê –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å "
                "–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ‚Äì —è —É–∂–µ –ø–æ–∑–∞–±–æ—Ç–∏–ª–∞—Å—å –æ "
                "–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏\n\n"
                "üß† –Ø –Ω–µ –∫–æ–ø–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äì –º–æ–∏ "
                "—Ä–∞–∑–±–æ—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –æ–ø—ã—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –∏ –µ–≥–æ "
                "—Ä–∞–±–æ—Ç–µ —Å –ª—é–¥—å–º–∏\n\n"
                "üòé –î–∞–º –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –≤–∞–∂–Ω—ã–º —Å—Ñ–µ—Ä–∞–º: —Ñ–∏–Ω–∞–Ω—Å—ã, "
                "–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ"
            )
        )

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                        url="https://disk.yandex.ru/i/DwatWs4N5h5HFA"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û–∫–µ–π üëåüèº",
                        callback_data="ok",
                    )
                ]
            ]
        )

        await message.answer(
            (
                "–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–ª—É—á—à–µ, —á—Ç–æ–±—ã –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã "
                "–ø—Ä–∏–Ω–æ—Å–∏–ª–∏ —Ç–µ–±–µ –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã ü§ó\n\n"
                "‚úçüèº –ó–∞–ø–æ–ª–Ω–∏—à—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É?\n\n"
                "–Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å "
                "–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ "
                "‚Äî –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã üîêü´±üèª‚Äçü´≤üèº"
            ),
            reply_markup=kb,
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.id} –±–µ–∑ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª –∞–Ω–∫–µ—Ç—É")


@dp.callback_query(F.data == "ok")
async def on_ok(callback: CallbackQuery):
    """–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–û–∫–µ–π" ‚Äî —Å—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª"""
    await callback.answer()
    kb = build_gender_kb(selected=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª üëáüèº",
        reply_markup=kb,
    )


@dp.callback_query(F.data == "start_new_analysis")
async def on_start_new_analysis(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞, –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É' –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª üëáüèº",
        reply_markup=build_gender_kb(selected=None)
    )


class ProfileForm(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_birth_date = State()
    waiting_for_birth_city = State()
    waiting_for_birth_city_confirm = State()
    waiting_for_birth_time_accuracy = State()
    waiting_for_birth_time_local = State()
    waiting_for_birth_time_confirm = State()
    waiting_for_birth_time_approx_confirm = State()
    waiting_for_birth_time_unknown_confirm = State()


class QuestionForm(StatesGroup):
    waiting_for_question = State()


def build_gender_kb(selected: str | None) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞. –ï—Å–ª–∏ selected –∑–∞–¥–∞–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫ –∏
    –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.
    """
    female_text = ("‚úÖ " if selected == "female" else "") + "üë©üèª –ñ–µ–Ω—Å–∫–∏–π"
    male_text = ("‚úÖ " if selected == "male" else "") + "üë®üèº –ú—É–∂—Å–∫–æ–π"

    rows = [
        [
            InlineKeyboardButton(
                text=female_text, callback_data="gender:female"
            )
        ],
        [
            InlineKeyboardButton(
                text=male_text, callback_data="gender:male"
            )
        ],
    ]
    if selected in {"male", "female"}:
        rows.append(
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="gender_confirm"
                )
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def show_personal_cabinet(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (Message –∏–ª–∏ CallbackQuery)
    if hasattr(message_or_callback, 'from_user'):
        # –≠—Ç–æ CallbackQuery
        user_id = message_or_callback.from_user.id if message_or_callback.from_user else 0
        cb_msg = cast(Message, message_or_callback.message)
        answer_method = cb_msg.answer
    else:
        # –≠—Ç–æ Message
        user_id = message_or_callback.from_user.id if message_or_callback.from_user else 0
        answer_method = message_or_callback.answer
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        from db import get_session
        from models import User, Prediction
        from sqlalchemy import select, func
        
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                await answer_method(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–±–æ—Ä–æ–≤
            predictions_result = await session.execute(
                select(
                    Prediction.planet,
                    Prediction.prediction_type,
                    func.count(Prediction.prediction_id).label('count')
                )
                .where(
                    Prediction.user_id == user.user_id,
                    Prediction.is_deleted.is_(False)
                )
                .group_by(Prediction.planet, Prediction.prediction_type)
            )
            predictions_stats = predictions_result.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            profile_info = []
            if user.full_name:
                profile_info.append(f"üìù –ò–º—è: {user.full_name}")
            if user.gender and user.gender != "unknown":
                gender_emoji = {"male": "üë®", "female": "üë©", "other": "üßë"}.get(user.gender.value, "‚ùì")
                gender_text = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π", "other": "–î—Ä—É–≥–æ–π"}.get(user.gender.value, "–ù–µ —É–∫–∞–∑–∞–Ω")
                profile_info.append(f"{gender_emoji} –ü–æ–ª: {gender_text}")
            if user.birth_date:
                profile_info.append(f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date.strftime('%d.%m.%Y')}")
            if user.birth_place_name:
                profile_info.append(f"üìç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_place_name}")
            if user.zodiac_sign:
                profile_info.append(f"‚ôà –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {user.zodiac_sign.value}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–±–æ—Ä–æ–≤
            analysis_stats = []
            planet_emojis = {
                "moon": "üåô", "sun": "‚òÄÔ∏è", "mercury": "‚òøÔ∏è", 
                "venus": "‚ôÄÔ∏è", "mars": "‚ôÇÔ∏è"
            }
            
            total_analyses = 0
            for stat in predictions_stats:
                planet = stat.planet.value
                prediction_type = stat.prediction_type.value
                count = stat.count
                total_analyses += count
                
                emoji = planet_emojis.get(planet, "ü™ê")
                type_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if prediction_type == "free" else "–ü–ª–∞—Ç–Ω—ã–π"
                analysis_stats.append(f"{emoji} {planet.title()}: {count} ({type_text})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_parts = ["üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n"]
            
            if profile_info:
                text_parts.append("**üìã –ü—Ä–æ—Ñ–∏–ª—å:**")
                text_parts.extend(profile_info)
                text_parts.append("")
            
            text_parts.append(f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–±–æ—Ä–æ–≤:**")
            text_parts.append(f"–í—Å–µ–≥–æ —Ä–∞–∑–±–æ—Ä–æ–≤: {total_analyses}")
            
            if analysis_stats:
                text_parts.append("")
                for stat in analysis_stats:
                    text_parts.append(f"‚Ä¢ {stat}")
            else:
                text_parts.append("‚Ä¢ –†–∞–∑–±–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            
            text_parts.append("")
            text_parts.append("**üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
            text_parts.append("‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Ç—Ä–æ–ª–æ–≥—É")
            text_parts.append("‚Ä¢ –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–∞–∑–±–æ—Ä—ã")
            text_parts.append("‚Ä¢ –ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                            callback_data="ask_question"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üí≥ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä",
                            callback_data="buy_analysis"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üÜï –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä",
                            callback_data="new_analysis"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            )
            
            await answer_method(
                "\n".join(text_parts),
                reply_markup=kb,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await answer_method(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã."
        )


async def show_main_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    —Ä–∞–∑–±–æ—Ä–æ–º"""
    text = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="personal_cabinet"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                    callback_data="ask_question"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí≥ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä", callback_data="buy_analysis"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üÜï –ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ",
                    callback_data="new_analysis"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì FAQ", callback_data="faq"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üÜò –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–±–æ—Ä—ã", 
                    callback_data="delete_predictions"
                )
            ]
        ]
    )

    if hasattr(message_or_callback, 'message'):
        # –≠—Ç–æ callback
        cb_msg = cast(Message, message_or_callback.message)
        await cb_msg.answer(text, reply_markup=kb)
    else:
        # –≠—Ç–æ message
        await message_or_callback.answer(text, reply_markup=kb)


async def show_profile_completion_message(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    text = (
        "–°–º–æ—Ç—Ä–∏, —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å –Ω–∞—à—É —Ä–∞–±–æ—Ç—É —Å —Ç–µ–±—è, –∞ –∏–º–µ–Ω–Ω–æ —Å —Ä–∞–∑–±–æ—Ä–∞ "
        "—Ç–≤–æ–µ–π –õ—É–Ω—ã üåô\n\n"
        "–û–±—ä—è—Å–Ω—é –ø–æ—á–µ–º—Éüëáüèº\n\n"
        "üåí –õ—É–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –µ—â–µ –≤ —É—Ç—Ä–æ–±–µ –º–∞—Ç–µ—Ä–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å—é –∂–∏–∑–Ω—å, –æ—Ç –Ω–µ—ë "
        "–∑–∞–≤–∏—Å—è—Ç —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–æ, –∫–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –º–∏—Ä –∏ –¥–∞–∂–µ "
        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ\n\n"
        "üåì –≠—Ç–∞ –ø–ª–∞–Ω–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–º —Ç–≤–æ–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞: –µ—Å–ª–∏ –æ–Ω "
        "–Ω–µ –ø—Ä–æ—á–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥—É—Ç –∏ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ "
        "—Ä–∞–∑–±–∏—Ä–∞—Ç—å –≤—Å–µ–º–∏ –ª—é–±–∏–º—ã—Ö –í–µ–Ω–µ—Ä—É –∏ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ;)\n\n"
        "üåî –ü–æ–∫–∞ –≤—Å–µ –±–µ–≥—É—Ç, —Å–ø–µ—à–∞—Ç –∏ –∑–∞–±—ã–≤–∞—é—Ç –ø—Ä–æ —Å–µ–±—è, —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–µ –±–æ—è—Ç—å—Å—è "
        "–≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ, —á—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Å –Ω–∞—à–µ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–µ–π –∫ "
        "–¥–æ—Å—Ç–∏–≥–∞—Ç–æ—Ä—Å—Ç–≤—É, —Å–æ–≥–ª–∞—Å–∏—Å—å?\n\n"
        "üåï –ù–∏–∫–∞–∫–∏—Ö –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—á–µ–ª–µ–π ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø–æ–∫–æ–π–Ω–æ–µ –∏ "
        "—É–≤–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∂–∏–∑–Ω–∏"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–Ω–µ–º", callback_data="start_moon_analysis"
                )
            ]
        ]
    )

    if hasattr(message_or_callback, 'answer'):
        # –≠—Ç–æ callback
        cb_msg = cast(Message, message_or_callback.message)
        await cb_msg.answer(text, reply_markup=kb)
    else:
        # –≠—Ç–æ message
        await message_or_callback.answer(text, reply_markup=kb)


def zodiac_sign_ru_for_date(d: date) -> ZodiacSignRu:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º) –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.

    –î–∏–∞–ø–∞–∑–æ–Ω—ã (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –ø–æ –∑–∞–ø–∞–¥–Ω–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏:
    –ö–æ–∑–µ—Ä–æ–≥ 22.12‚Äì19.01, –í–æ–¥–æ–ª–µ–π 20.01‚Äì18.02, –†—ã–±—ã 19.02‚Äì20.03,
    –û–≤–µ–Ω 21.03‚Äì19.04, –¢–µ–ª–µ—Ü 20.04‚Äì20.05, –ë–ª–∏–∑–Ω–µ—Ü—ã 21.05‚Äì20.06,
    –†–∞–∫ 21.06‚Äì22.07, –õ–µ–≤ 23.07‚Äì22.08, –î–µ–≤–∞ 23.08‚Äì22.09,
    –í–µ—Å—ã 23.09‚Äì22.10, –°–∫–æ—Ä–ø–∏–æ–Ω 23.10‚Äì21.11, –°—Ç—Ä–µ–ª–µ—Ü 22.11‚Äì21.12.
    """
    m, day = d.month, d.day

    if (m == 12 and day >= 22) or (m == 1 and day <= 19):
        return ZodiacSignRu.kozerog
    elif (m == 1 and day >= 20) or (m == 2 and day <= 18):
        return ZodiacSignRu.vodolei
    elif (m == 2 and day >= 19) or (m == 3 and day <= 20):
        return ZodiacSignRu.ryby
    elif (m == 3 and day >= 21) or (m == 4 and day <= 19):
        return ZodiacSignRu.oven
    elif (m == 4 and day >= 20) or (m == 5 and day <= 20):
        return ZodiacSignRu.telec
    elif (m == 5 and day >= 21) or (m == 6 and day <= 20):
        return ZodiacSignRu.bliznecy
    elif (m == 6 and day >= 21) or (m == 7 and day <= 22):
        return ZodiacSignRu.rak
    elif (m == 7 and day >= 23) or (m == 8 and day <= 22):
        return ZodiacSignRu.lev
    elif (m == 8 and day >= 23) or (m == 9 and day <= 22):
        return ZodiacSignRu.deva
    elif (m == 9 and day >= 23) or (m == 10 and day <= 22):
        return ZodiacSignRu.vesy
    elif (m == 10 and day >= 23) or (m == 11 and day <= 21):
        return ZodiacSignRu.skorpion
    else:  # (m == 11 and day >= 22) or (m == 12 and day <= 21)
        return ZodiacSignRu.strelec


# ======== –í–æ–ø—Ä–æ—Å: –í–∞—à –ø–æ–ª ========
@dp.message(Command("gender"))
async def ask_gender(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú—É–∂—Å–∫–æ–π", callback_data="gender:male"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female"
                )
            ],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)


@dp.callback_query(F.data.startswith("gender:"))
async def set_gender(callback: CallbackQuery, state: FSMContext):
    cb_data = cast(str, callback.data)
    _, value = cb_data.split(":", 1)
    if value not in {"male", "female"}:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å—Ä–∞–∑—É
    await state.update_data(pending_gender=value)

    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–∞ –∏ –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–∫‚Äë–º–∞—Ä–∫–æ–π + –¥–æ–±–∞–≤–ª—è–µ–º
    # –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    kb = build_gender_kb(selected=value)
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=kb)
    except Exception:
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤—ã–±–æ—Ä –ø–æ–ª–∞", reply_markup=kb)
    await callback.answer()


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query(F.data.startswith("additional_gender:"))
async def handle_additional_gender_callback_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_gender_callback(callback, state)


@dp.callback_query(F.data.startswith("additional_birth_date:"))
async def handle_additional_birth_date_callback_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_date_callback(callback, state)


@dp.callback_query(F.data.startswith("additional_city:"))
async def handle_additional_birth_city_callback_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_city_callback(callback, state)


@dp.callback_query(F.data.startswith("additional_birth_time:"))
async def handle_additional_birth_time_callback_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_time_callback(callback, state)


@dp.callback_query(F.data.startswith("additional_time_unknown:"))
async def handle_additional_time_unknown_callback_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_time_unknown_callback(callback, state)


@dp.callback_query(F.data == "additional_profile:cancel")
async def handle_additional_profile_cancel_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_profile_cancel(callback, state)


@dp.callback_query(F.data.startswith("additional_timeacc:"))
async def handle_additional_birth_time_accuracy_callback_wrapper(callback: CallbackQuery, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_time_accuracy_callback(callback, state)


@dp.callback_query(F.data == "gender_confirm")
async def confirm_gender(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    value = data.get("pending_gender")
    if value not in {"male", "female"}:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª", show_alert=True)
        return
    cb_user = cast(TgUser, callback.from_user)
    tg_id = cb_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –ë–î
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == tg_id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É: /start", show_alert=True
            )
            await state.clear()
            return
        user.gender = Gender(value)

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ
    await state.update_data(pending_gender=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–Ω–∫–µ—Ç—ã ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üí´")
    await state.set_state(ProfileForm.waiting_for_first_name)
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@dp.message(ProfileForm.waiting_for_first_name)
async def receive_first_name(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with get_session() as session:
        uid = cast(TgUser, message.from_user).id
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == uid)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´"
            )
            await state.clear()
            return
        user.first_name = name

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(ProfileForm.waiting_for_birth_date)
    await message.answer(
        f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}üôåüèº\n\n"
        "üìÜ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–ø—Ä–∏–º–µ—Ä: 23.04.1987"
    )


@dp.message(ProfileForm.waiting_for_birth_date)
async def receive_birth_date(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    try:
        dt = datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
            "–î–î.–ú–ú.–ì–ì–ì–ì\n–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.04.1987"
        )
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    await state.update_data(pending_birth_date=dt.isoformat())

    date_str = dt.strftime("%d.%m.%Y")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–µ—Ä–Ω–æ", callback_data="bdate:confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="bdate:redo"
                )
            ],
        ]
    )
    await message.answer(
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_str} -\n" "–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº",
        reply_markup=kb,
    )
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–ø–µ—Ä–µ–≤–≤–æ–¥–∞
    await state.set_state(ProfileForm.waiting_for_birth_date)


@dp.callback_query(F.data == "bdate:confirm")
async def on_birth_date_confirm(
    callback: CallbackQuery, state: FSMContext
):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ—Ä–æ–¥—É
    data = await state.get_data()
    iso = data.get("pending_birth_date")
    if not iso:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    from datetime import date as _date
    try:
        dt = _date.fromisoformat(iso)
    except Exception:
        await callback.answer(
            "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        return

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return
        user.birth_date = dt
        sign_enum = zodiac_sign_ru_for_date(dt)
        user.zodiac_sign = sign_enum

    await state.update_data(pending_birth_date=None)
    await state.set_state(ProfileForm.waiting_for_birth_city)

    cb_msg = cast(Message, callback.message)
    sign = sign_enum.value
    await cb_msg.answer(
        f"–ü–æ–Ω—è—Ç–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç—ã —É –Ω–∞—Å {sign} ü§≠ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –µ—â–µ "
        "–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–µ \n\n\n"
        "üìç –î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏ –º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –∂–µ –±–ª–∏–∂–∞–π—à–∏–π "
        "–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ \n"
        "–ø—Ä–∏–º–µ—Ä: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await callback.answer()


@dp.callback_query(F.data == "bdate:redo")
async def on_birth_date_redo(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Å–Ω–æ–≤–∞
    await state.update_data(pending_birth_date=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.04.1987"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_date)
    await callback.answer()


@dp.message(ProfileForm.waiting_for_birth_city)
async def receive_birth_city(message: Message, state: FSMContext):
    city = (message.text or "").strip()
    if not city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        return

    # –ü—Ä–æ–±—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    try:
        geo = await geocode_city_ru(city)
    except GeocodingError as e:
        logger.warning(f"Geocoding failed for '{city}': {e}")
        geo = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    city_data = {
        "city_input": city,
        "geo": geo
    }
    await state.update_data(pending_birth_city=city_data)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    if geo:
        place = geo["place_name"]
        display_text = f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {place}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
    else:
        display_text = f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {city}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–µ—Ä–Ω–æ", callback_data="bcity:confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="bcity:redo"
                )
            ],
        ]
    )
    await message.answer(display_text, reply_markup=kb)
    await state.set_state(ProfileForm.waiting_for_birth_city_confirm)


@dp.callback_query(F.data == "bcity:confirm")
async def on_birth_city_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    city_data = data.get("pending_birth_city")
    if not city_data:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    city_input = city_data["city_input"]
    geo = city_data["geo"]

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        user.birth_city_input = city_input

        # –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è,
        # —Å—Ç—Ä–∞–Ω—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if geo:
            user.birth_place_name = geo.get("place_name")
            user.birth_country_code = geo.get("country_code")
            user.birth_lat = geo.get("lat")
            user.birth_lon = geo.get("lon")
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            user.birth_place_name = None
            user.birth_country_code = None
            user.birth_lat = None
            user.birth_lon = None

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(pending_birth_city=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if geo:
        place = geo["place_name"]
        lat = geo["lat"]
        lon = geo["lon"]
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞—à–ª–∞: {place}\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f} ‚úÖ"
        )
    else:
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "–ü—Ä–∏–Ω—è—Ç–æ! –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –ø–æ –±–∞–∑–µ. "
            "–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–†–æ—Å—Å–∏—è, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä') "
            "–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥."
        )

    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëçüèº –ó–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:exact",
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§èüèº –ó–Ω–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:approx",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üëéüèº –ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è –≤–æ–æ–±—â–µ",
                    callback_data="timeacc:unknown",
                )
            ],
        ]
    )
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è "
        "ü™Ñ  \n\n\n"
        "üï∞ –ü–æ–¥—Å–∫–∞–∂–∏, –∑–Ω–∞–µ—à—å –ª–∏ —Ç—ã –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
        reply_markup=kb,
    )
    await state.set_state(ProfileForm.waiting_for_birth_time_accuracy)
    await callback.answer()


@dp.callback_query(F.data == "bcity:redo")
async def on_birth_city_redo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ"""
    await state.update_data(pending_birth_city=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –∂–µ –±–ª–∏–∂–∞–π—à–∏–π "
        "–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥\n"
        "–ø—Ä–∏–º–µ—Ä: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_city)
    await callback.answer()


@dp.callback_query(F.data.startswith("timeacc:"))
async def set_birth_time_accuracy(callback: CallbackQuery, state: FSMContext):
    cb_data = cast(str, callback.data)
    _, value = cb_data.split(":", 1)
    if value not in {"exact", "approx", "unknown"}:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    # –î–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "unknown" –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º –≤ –ë–î ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if value != "unknown":
        async with get_session() as session:
            cb_user = cast(TgUser, callback.from_user)
            res = await session.execute(
                select(DbUser).where(
                    DbUser.telegram_id == cb_user.id
                )
            )
            user = res.scalar_one_or_none()
            if user is None:
                await callback.answer(
                    "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                    show_alert=True,
                )
                await state.clear()
                return
            user.birth_time_accuracy = value

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if value == "exact":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        await state.update_data(time_accuracy_type="exact")
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "–°—É–ø–µ—Ä! ü§åüèº  \n\n"
            + "—Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –±–∏—Ä–∫–µ/—Å–ø—Ä–∞–≤–∫–µ "
            + "–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
            + "–ø—Ä–∏–º–µ—Ä: 10:38"
        )
        await state.set_state(ProfileForm.waiting_for_birth_time_local)
    elif value == "approx":
        await state.update_data(time_accuracy_type="approx")
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "–ü—Ä–∏–Ω—è—Ç–æ! ‚úåüèº  \n\n"
            "üï∞ –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
            "–ø—Ä–∏–º–µ—Ä: 11:00"
        )
        await state.set_state(ProfileForm.waiting_for_birth_time_local)
    else:  # unknown
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        display_text = "–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í–µ—Ä–Ω–æ", callback_data="btime_unknown:confirm"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è",
                        callback_data="btime_unknown:specify"
                    )
                ],
            ]
        )

        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(display_text, reply_markup=kb)
        await state.set_state(
            ProfileForm.waiting_for_birth_time_unknown_confirm
        )

    await callback.answer()


@dp.message(ProfileForm.waiting_for_birth_time_local)
async def receive_birth_time_local(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    from datetime import datetime as dt_mod
    try:
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        t = dt_mod.strptime(text, "%H:%M").time()
    except ValueError:
        await message.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
            "–ß–ß:–ú–ú\n"
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:38"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    data = await state.get_data()
    time_accuracy_type = data.get("time_accuracy_type", "exact")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(pending_birth_time=t.isoformat())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    time_str = t.strftime("%H:%M")
    if time_accuracy_type == "exact":
        display_text = (
            f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
        )
        next_state = ProfileForm.waiting_for_birth_time_confirm
        callback_data = "btime:confirm"
        redo_callback_data = "btime:redo"
    else:  # approx
        display_text = (
            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
        )
        next_state = ProfileForm.waiting_for_birth_time_approx_confirm
        callback_data = "btime_approx:confirm"
        redo_callback_data = "btime_approx:redo"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–µ—Ä–Ω–æ", callback_data=callback_data
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data=redo_callback_data
                )
            ],
        ]
    )
    await message.answer(display_text, reply_markup=kb)
    await state.set_state(next_state)


@dp.callback_query(F.data == "btime:confirm")
async def on_birth_time_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    time_iso = data.get("pending_birth_time")
    if not time_iso:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    from datetime import time as _time
    try:
        t = _time.fromisoformat(time_iso)
    except Exception:
        await callback.answer(
            "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        return

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        user.birth_time_local = t

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ UTC-—Å–º–µ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç–∞
        try:
            if (
                user.birth_date
                and user.birth_lat is not None
                and user.birth_lon is not None
            ):
                tzres = resolve_timezone(
                    user.birth_lat, user.birth_lon, user.birth_date, t
                )
                if tzres:
                    user.tzid = tzres.tzid
                    user.tz_offset_minutes = tzres.offset_minutes
                    user.birth_datetime_utc = tzres.birth_datetime_utc
                    tz_label = (
                        f"{tzres.tzid} "
                        f"({format_utc_offset(tzres.offset_minutes)})"
                    )
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_label}"
                    )
                else:
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "
                        "–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."
                    )
            else:
                cb_msg = cast(Message, callback.message)
                await cb_msg.answer(
                    "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                    "–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω—É–∂–Ω—ã –¥–∞—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "
                    "–º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."
                )
        except Exception as e:
            logger.warning(f"Timezone resolve failed: {e}")
            cb_msg = cast(Message, callback.message)
            await cb_msg.answer(
                "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                "–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(pending_birth_time=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await state.clear()
    await show_profile_completion_message(callback)
    await callback.answer()


@dp.callback_query(F.data == "btime:redo")
async def on_birth_time_redo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ"""
    await state.update_data(pending_birth_time=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:38"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_time_local)
    await callback.answer()


@dp.callback_query(F.data == "btime_approx:confirm")
async def on_birth_time_approx_confirm(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    time_iso = data.get("pending_birth_time")
    if not time_iso:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    from datetime import time as _time
    try:
        t = _time.fromisoformat(time_iso)
    except Exception:
        await callback.answer(
            "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        return

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        user.birth_time_local = t

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ UTC-—Å–º–µ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç–∞
        try:
            if (
                user.birth_date
                and user.birth_lat is not None
                and user.birth_lon is not None
            ):
                tzres = resolve_timezone(
                    user.birth_lat, user.birth_lon, user.birth_date, t
                )
                if tzres:
                    user.tzid = tzres.tzid
                    user.tz_offset_minutes = tzres.offset_minutes
                    user.birth_datetime_utc = tzres.birth_datetime_utc
                    tz_label = (
                        f"{tzres.tzid} "
                        f"({format_utc_offset(tzres.offset_minutes)})"
                    )
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_label}"
                    )
                else:
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "
                        "–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."
                    )
            else:
                cb_msg = cast(Message, callback.message)
                await cb_msg.answer(
                    "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                    "–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω—É–∂–Ω—ã –¥–∞—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "
                    "–º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."
                )
        except Exception as e:
            logger.warning(f"Timezone resolve failed: {e}")
            cb_msg = cast(Message, callback.message)
            await cb_msg.answer(
                "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                "–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(pending_birth_time=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await state.clear()
    await show_profile_completion_message(callback)
    await callback.answer()


@dp.callback_query(F.data == "btime_approx:redo")
async def on_birth_time_approx_redo(
    callback: CallbackQuery, state: FSMContext
):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ"""
    await state.update_data(pending_birth_time=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 11:00"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_time_local)
    await callback.answer()


@dp.callback_query(F.data == "btime_unknown:confirm")
async def on_birth_time_unknown_confirm(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É"""
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ! üîÆ  \n\n"
        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è üëåüèº \n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç —á—É—Ç—å –º–µ–Ω–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ "
        "–∞–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ–π! üíØüöÄ"
    )

    await state.clear()
    await show_profile_completion_message(callback)
    await callback.answer()


@dp.callback_query(F.data == "btime_unknown:specify")
async def on_birth_time_unknown_specify(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëçüèº –ó–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:exact",
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§èüèº –ó–Ω–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:approx",
                )
            ],
        ]
    )

    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π —É–∫–∞–∂–µ–º –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è üï∞\n\n"
        "–ü–æ–¥—Å–∫–∞–∂–∏, –∑–Ω–∞–µ—à—å –ª–∏ —Ç—ã –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
        reply_markup=kb,
    )
    await state.set_state(ProfileForm.waiting_for_birth_time_accuracy)
    await callback.answer()


@dp.callback_query(F.data == "start_moon_analysis")
async def on_start_moon_analysis(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–Ω–µ–º' - –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –õ—É–Ω—ã"""
    await start_moon_analysis(callback, state)


@dp.callback_query(F.data == "personal_cabinet")
async def on_personal_cabinet(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'"""
    await callback.answer()
    await show_personal_cabinet(callback)


@dp.callback_query(F.data == "buy_analysis")
async def on_buy_analysis(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä'"""
    await callback.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–±–æ—Ä–æ–≤
    from handlers.buy_analysis_handler import show_buy_analysis_menu
    
    cb_msg = cast(Message, callback.message)
    await show_buy_analysis_menu(cb_msg)


@dp.callback_query(F.data == "buy_analysis_self")
async def on_buy_analysis_self(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä –¥–ª—è —Å–µ–±—è'"""
    await callback.answer()
    
    from handlers.buy_analysis_handler import handle_buy_analysis_self
    
    await handle_buy_analysis_self(callback, state)


@dp.callback_query(F.data == "add_new_date")
async def on_add_new_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É'"""
    await callback.answer()
    
    await start_additional_profile_creation(callback, state)


@dp.callback_query(F.data == "new_analysis")
async def on_new_analysis(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id if callback.from_user else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        from db import get_session
        from models import User, Prediction
        from sqlalchemy import select, func
        
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                await cb_msg.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–±–æ—Ä–æ–≤
            predictions_count = await session.execute(
                select(func.count(Prediction.prediction_id))
                .where(
                    Prediction.user_id == user.user_id,
                    Prediction.is_deleted.is_(False)
                )
            )
            existing_count = predictions_count.scalar()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            text_parts = [
                "üÜï **–ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ**\n",
                "–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
            ]
            
            if user.full_name:
                text_parts.append(f"üìù **–¢–µ–∫—É—â–µ–µ –∏–º—è:** {user.full_name}")
            if user.birth_date:
                text_parts.append(f"üéÇ **–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {user.birth_date.strftime('%d.%m.%Y')}")
            if user.birth_place_name:
                text_parts.append(f"üìç **–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:** {user.birth_place_name}")
            
            text_parts.extend([
                "",
                f"üìä **–¢–µ–∫—É—â–∏–µ —Ä–∞–∑–±–æ—Ä—ã:** {existing_count}",
                "",
                "‚ö†Ô∏è **–í–∞–∂–Ω–æ:**",
                "‚Ä¢ –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –∑–∞–º–µ–Ω–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
                "‚Ä¢ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–±–æ—Ä—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏",
                "‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç",
                "",
                "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã?"
            ])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
                            callback_data="start_new_analysis"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                            callback_data="personal_cabinet"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            )
            
            await cb_msg.answer(
                "\n".join(text_parts),
                reply_markup=kb,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º —Ä–∞–∑–±–æ—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã."
        )


@dp.callback_query(F.data == "faq")
async def on_faq(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'FAQ'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )
            ]
        ]
    )
    
    faq_text = (
        "‚ÅâÔ∏è FAQ\n\n"
        "‚ùî –û—Ç–∫—É–¥–∞ –±–µ—Ä—ë—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? –≠—Ç–æ –Ω–µ –∫–æ–ø–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞?\n"
        "üòº: –ù–µ—Ç, —è –Ω–µ –∫–æ–ø–∏—Ä—É—é —Ç–µ–∫—Å—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ú–æ–∏ —Ä–∞–∑–±–æ—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∑–Ω–∞–Ω–∏—è—Ö –∏ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Ä–∞–±–æ—Ç—É –ò–ò.\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –¥–∞—é—Ç —Ç–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–ª—è –≤—Å–µ—Ö (–∏ —Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ).\n"
        "–£ –º–µ–Ω—è –∂–µ —Ä–∞–∑–±–æ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π: —è —É—á–∏—Ç—ã–≤–∞—é –Ω–µ —Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫ –ø–ª–∞–Ω–µ—Ç—ã, –Ω–æ –∏ –µ—ë –¥–æ–º, –∞—Å–ø–µ–∫—Ç—ã, —Å–æ—á–µ—Ç–∞–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–∞—Ä—Ç—ã ‚Äî –≤ –∏—Ç–æ–≥–µ –¥–∞—é —Ü–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, –∞ –Ω–µ –æ–±—â–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏.\n\n"
        "‚ùî –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –Ω–µ –∑–Ω–∞—é –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è / –∑–Ω–∞—é –Ω–µ—Ç–æ—á–Ω–æ?\n"
        "üòº: –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ü–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä! –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n"
        "‚ñ™Ô∏è —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç),\n"
        "‚ñ™Ô∏è –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—É—Ç—Ä–æ¬ª ‚Üí 07:00, ¬´–æ–∫–æ–ª–æ 12¬ª ‚Üí 12:00),\n"
        "‚ñ™Ô∏è –∏–ª–∏ —Å–æ–≤—Å–µ–º –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "–ß—Ç–æ –¥–∞—ë—Ç –≤—Ä–µ–º—è? –û–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ –¥–æ–º–∞—Ö. –° –Ω–∏–º —Ä–∞–∑–±–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π. –ë–µ–∑ –Ω–µ–≥–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—à—å —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –¥–æ–º–æ–≤.\n"
        "–°–æ–≤–µ—Ç –æ—Ç –º–µ–Ω—è: –µ—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, –ø–∏—à–∏ —Ö–æ—Ç—è –±—ã –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ!\n\n"
        "‚ùî –ö–∞–∫ –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è/–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è?\n"
        "üòº: –í —Ç–≤–æ–µ–º –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–≤–≤–µ–¥–∏ –≤ –±–æ—Ç–µ /lk) –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –¥–∞—Ç—ã¬ª ‚Äî —Ç–∞–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "‚ùî –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç (–¥–ª—è –¥—Ä—É–∑–µ–π/–¥–µ—Ç–µ–π/–ø–∞—Ä—Ç–Ω—ë—Ä–∞)?\n"
        "üòº: –î–∞, –º–æ–∂–Ω–æ. –ë–æ–ª–µ–µ —Ç–æ–≥–æ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏–º –¥–µ—Ç—Å–∫–∏–µ —Ä–∞–∑–±–æ—Ä—ã –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!\n\n"
        "‚ùî –õ—É–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞ –≤—Å–µ–≥–¥–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑?\n"
        "üòº: –†–∞–∑–±–æ—Ä –õ—É–Ω—ã –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π.\n\n"
        "‚ùî –ö–∞–∫—É—é –ø–ª–∞–Ω–µ—Ç—É –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–π?\n"
        "üòº: –Ø —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å —Å—Ä–∞–∑—É –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç ‚Äî —Ç–∞–∫ —Ç—ã —É–≤–∏–¥–∏—à—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –≤—Å–µ–º —Å—Ñ–µ—Ä–∞–º + —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ª—é–±–æ–π –ø–ª–∞–Ω–µ—Ç–µ.\n\n"
        "‚ùî –ü–æ—á–µ–º—É —Ç–∞–∫–∏–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã?\n"
        "üòº: –¶–µ–Ω—ã –Ω–∏–∑–∫–∏–µ, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ + –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ö–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ ¬´–±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ¬ª, —Ü–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏—Ç—Å—è.\n\n"
        "‚ùî –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?\n"
        "üòº: –£ –Ω–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å ¬´–ÆKassa¬ª.\n\n"
        "‚ùî –Ø –æ–ø–ª–∞—Ç–∏–ª, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ, —á—Ç–æ –¥–µ–ª–∞—Ç—å?\n"
        "üòº: –ü–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–∏—à–∏ –≤ /help, —Ç–∞–º –±—ã—Å—Ç—Ä–æ –ø–æ–º–æ–≥—É—Ç.\n\n"
        "‚ùî –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —è –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Å–≤–æ–π —Ä–∞–∑–±–æ—Ä ‚Äî –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è?\n"
        "üòº: –î–∞, —Ä–∞–∑–±–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. –í —Ç–≤–æ–µ–º –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–≤–≤–µ–¥–∏ –≤ –±–æ—Ç–µ /lk) –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –¥–∞—Ç—ã¬ª ‚Äî —Ç–∞–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª—é–±–æ–π —Ä–∞–∑–±–æ—Ä –µ—â–µ —Ä–∞–∑.\n\n"
        "‚ùî –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥?\n"
        "üòº: –†–∞–∑–±–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥, —Ä–∞–∑–±–æ—Ä –¥–µ—Ç—Å–∫–∏—Ö –∫–∞—Ä—Ç –∏ –Ω–µ —Ç–æ–ª—å–∫–æ ‚Äî —ç—Ç–æ –≤—Å–µ –º—ã –¥–æ–±–∞–≤–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!"
    )
    
    await cb_msg.answer(
        faq_text,
        reply_markup=kb
    )


@dp.callback_query(F.data == "support")
async def on_support(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã'"""
    await callback.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    from handlers.support_handler import start_support_conversation
    
    cb_msg = cast(Message, callback.message)
    await start_support_conversation(cb_msg, state)


@dp.callback_query(F.data == "cancel_support")
async def on_cancel_support(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await callback.answer()
    
    from handlers.support_handler import cancel_support
    
    cb_msg = cast(Message, callback.message)
    await cancel_support(cb_msg, state)


@dp.message(SupportForm.waiting_for_message)
async def handle_support_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    from handlers.support_handler import handle_support_message as support_handler
    await support_handler(message, state)


@dp.callback_query(F.data == "delete_predictions")
async def on_delete_predictions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–±–æ—Ä—ã'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await cb_msg.answer(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–æ–≤\n\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï —Ç–≤–æ–∏ —Ä–∞–∑–±–æ—Ä—ã:\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä –õ—É–Ω—ã\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–µ—Ç\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                        callback_data="confirm_delete_predictions"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="back_to_menu"
                    )
                ]
            ]
        )
    )


@dp.callback_query(F.data == "back_to_menu")
async def on_back_to_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    await callback.answer()
    await show_main_menu(callback)


@dp.callback_query(F.data == "confirm_delete_predictions")
async def on_confirm_delete_predictions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–±–æ—Ä–æ–≤"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id if callback.from_user else 0
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–∞–∑–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from db import get_session
        from models import Prediction
        from sqlalchemy import delete
        
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from models import User
            from sqlalchemy import select
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                await cb_msg.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–∞–∑–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete_result = await session.execute(
                delete(Prediction).where(Prediction.user_id == user.user_id)
            )
            
            await session.commit()
            
            deleted_count = delete_result.rowcount
            
            await cb_msg.answer(
                f"‚úÖ –†–∞–∑–±–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n\n"
                f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}\n\n"
                f"–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ! üîÑ",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="back_to_menu"
                            )
                        ]
                    ]
                )
            )
            
            logger.info(
                f"Deleted {deleted_count} predictions for user {user_id}"
            )
            
    except Exception as e:
        logger.error(f"Error deleting predictions: {e}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–±–æ—Ä–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            )
        )


# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è on_pay_sun


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã
@dp.callback_query(F.data == "get_recommendations")
async def on_get_recommendations(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'"""
    await handle_get_recommendations(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞
@dp.callback_query(F.data == "get_sun_recommendations")
async def on_get_sun_recommendations(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –¥–ª—è –°–æ–ª–Ω—Ü–∞"""
    await handle_get_sun_recommendations(callback, state)


@dp.callback_query(F.data == "ask_question")
async def on_ask_question(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
    await handle_ask_question(callback, state)




@dp.callback_query(F.data == "get_mars_recommendations")
async def on_get_mars_recommendations(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –¥–ª—è –ú–∞—Ä—Å–∞"""
    await handle_get_mars_recommendations(callback, state)


@dp.callback_query(F.data == "get_mercury_recommendations")
async def on_get_mercury_recommendations(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –¥–ª—è –ú–µ—Ä–∫—É—Ä–∏—è"""
    await handle_get_mercury_recommendations(callback, state)


@dp.callback_query(F.data == "get_venus_recommendations")
async def on_get_venus_recommendations(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –¥–ª—è –í–µ–Ω–µ—Ä—ã"""
    await handle_get_venus_recommendations(callback, state)












# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(AdditionalProfileForm.waiting_for_additional_name)
async def process_additional_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_name(message, state)


@dp.message(AdditionalProfileForm.waiting_for_additional_birth_date)
async def process_additional_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_date(message, state)


@dp.message(AdditionalProfileForm.waiting_for_additional_birth_city)
async def process_additional_birth_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_city(message, state)


# –£–¥–∞–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
# @dp.message(AdditionalProfileForm.waiting_for_additional_birth_time_accuracy)
# async def process_additional_birth_time_accuracy(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
#     await handle_additional_birth_time_accuracy(message, state)


@dp.message(AdditionalProfileForm.waiting_for_additional_birth_time_local)
async def process_additional_birth_time_local(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await handle_additional_birth_time_local(message, state)


@dp.message(QuestionForm.waiting_for_question)
async def process_user_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question = message.text.strip() if message.text else ""
    
    if not question:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—â–µ —Ä–∞–∑
    from handlers.ask_question_handler import (
        get_user_question_count, 
        MAX_QUESTIONS_PER_USER
    )
    
    user_id = message.from_user.id if message.from_user else 0
    question_count = await get_user_question_count(user_id)
    
    if question_count >= MAX_QUESTIONS_PER_USER:
        await message.answer(
            f"‚ùå –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n\n"
            f"–¢—ã —É–∂–µ –∑–∞–¥–∞–ª {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤. "
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_QUESTIONS_PER_USER}\n\n"
            "–ù–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                            callback_data="get_recommendations"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã",
                            callback_data="explore_other_areas"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            )
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await message.answer(
        "üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å...\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from queue_sender import send_question_to_queue
        user_telegram_id = message.from_user.id if message.from_user else 0
        
        logger.info(
            f"Attempting to send question to queue: user={user_telegram_id}, "
            f"question='{question[:50]}...'"
        )
        
        success = await send_question_to_queue(
            user_telegram_id=user_telegram_id,
            question=question
        )
        
        if success:
            logger.info(
                f"Question successfully sent to queue for user {user_telegram_id}"
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
        else:
            logger.error(
                f"Failed to send question to queue for user {user_telegram_id}"
            )
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
    except Exception as e:
        logger.error(f"Error processing question: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )




async def get_last_moon_prediction_profile_id(user_id: int) -> Optional[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç profile_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        profile_id –µ—Å–ª–∏ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, None –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π
    """
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(DbUser).where(DbUser.telegram_id == user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π)
        prediction_result = await session.execute(
            select(Prediction).where(
                Prediction.user_id == user.user_id,
                Prediction.planet == Planet.moon,
                Prediction.prediction_type == PredictionType.free,
                Prediction.is_active.is_(True),
                Prediction.is_deleted.is_(False)
            ).order_by(Prediction.created_at.desc())
        )
        prediction = prediction_result.scalars().first()  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
        
        if not prediction:
            return None
        
        return prediction.profile_id


@dp.callback_query(F.data == "explore_other_areas")
async def on_explore_other_areas(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
    profile_id = await get_last_moon_prediction_profile_id(callback.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º callback_data —Å profile_id –µ—Å–ª–∏ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    def create_callback_data(base_data: str) -> str:
        if profile_id:
            return f"{base_data}:{profile_id}"
        return base_data
    
    await cb_msg.answer(
        "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –ø–ª–∞–Ω–µ—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üåü\n\n"
        "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ\n"
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, "
        "–Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–∞—è –æ–ø–æ—Ä–∞, –≥–æ—Ä—è—â–∏–µ –≥–ª–∞–∑–∞, –æ—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ "
        "–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏\n\n"
        "üß† –ú–µ—Ä–∫—É—Ä–∏–π\n"
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏ –∏ –º—ã—à–ª–µ–Ω–∏—è, —É–º–µ–Ω–∏–µ —É–±–µ–∂–¥–∞—Ç—å –∏ "
        "–¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è, –ª—ë–≥–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —è—Å–Ω–∞—è –ø–æ–¥–∞—á–∞ –∏–¥–µ–π\n\n"
        "üí∞üíç –í–µ–Ω–µ—Ä–∞\n"
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–∞–∑–±–æ—Ä –±–ª–æ–∫–æ–≤ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å "
        "–∏ –ø—Ä–∏—Ç—è–≥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –¥–ª—è —Å–µ–±—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π, "
        "–Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –æ—Ç –∂–∏–∑–Ω–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —ë–º–∫–æ—Å—Ç–∏ ‚Äî –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, "
        "–∏–∑–æ–±–∏–ª–∏–µ\n\n"
        "üî• –ú–∞—Ä—Å\n"
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–æ—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Å–∏–ª—ã –≤–æ–ª–∏, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π "
        "–¥—É—Ö, —É–º–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤–æ–µ\n\n"
        "üîì –ü–æ–∫–∞ –±–æ—Ç –Ω–∞ —Ç–µ—Å—Ç–µ, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ø–æ—á—Ç–∏ "
        "–¥–∞—Ä–æ–º:\n\n"
        "üí∏ –û–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ ‚Äî 10‚ÇΩ (–≤–º–µ—Å—Ç–æ 999‚ÇΩ)\n"
        "üåå –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —Å—Ä–∞–∑—É ‚Äî 5‚ÇΩ (—Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞) + üéÅ: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ "
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–≤–æ–∏–º —Ä–∞–∑–±–æ—Ä–∞–º\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üòºüëáüèº",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üåå –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã",
                        callback_data=create_callback_data("explore_all_planets")
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ",
                        callback_data=create_callback_data("explore_sun")
                    ),
                    InlineKeyboardButton(
                        text="‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π",
                        callback_data=create_callback_data("explore_mercury")
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞",
                        callback_data=create_callback_data("explore_venus")
                    ),
                    InlineKeyboardButton(
                        text="‚ôÇÔ∏è –ú–∞—Ä—Å",
                        callback_data=create_callback_data("explore_mars")
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_menu"
                    )
                ]
            ]
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç
@dp.callback_query(F.data.startswith("explore_all_planets"))
async def on_explore_all_planets(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–ª–∞–Ω–µ—Ç–∞–º
    has_access = await check_user_payment_access(user_id, "all_planets")
    
    if has_access:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç
        from all_planets_handler import get_all_planets_handler
        
        handler = get_all_planets_handler()
        if handler:
            await handler.handle_payment_success(user_id, profile_id)
        else:
            await cb_msg.answer(
                "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data="explore_other_areas"
                            )
                        ]
                    ]
                )
            )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä—ã –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç (–¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)"
        )
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
        pay_callback = f"pay_all_planets:{profile_id}" if profile_id else "pay_all_planets"
        back_callback = f"explore_other_areas:{profile_id}" if profile_id else "explore_other_areas"
        
        await cb_msg.answer(
            "üåå –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã\n\n"
            "üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ "
            "–ø–æ –≤—Å–µ–º –ø–ª–∞–Ω–µ—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
            "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5‚ÇΩ (—Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞)\n\n"
            "üéÅ –ë–æ–Ω—É—Å: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–≤–æ–∏–º —Ä–∞–∑–±–æ—Ä–∞–º\n\n"
            "üìã –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ - —ç–Ω–µ—Ä–≥–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞\n"
            "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π - —Ä–µ—á—å, –º—ã—à–ª–µ–Ω–∏–µ, –æ–±—É—á–µ–Ω–∏–µ\n"
            "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞ - –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã, –∏–∑–æ–±–∏–ª–∏–µ\n"
            "‚ôÇÔ∏è –ú–∞—Ä—Å - –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–∏–ª–∞ –≤–æ–ª–∏, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 5‚ÇΩ",
                            callback_data=pay_callback
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data=back_callback
                        )
                    ]
                ]
            )
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä—ã –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç (–¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç), profile_id={profile_id}"
        )


@dp.callback_query(F.data.startswith("explore_sun"))
async def on_explore_sun(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–ª–Ω—Ü–µ'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –°–æ–ª–Ω—Ü—É
    has_access = await check_user_payment_access(user_id, "sun")
    
    if has_access:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä
        await cb_msg.answer(
            "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ\n\n"
            "üîÆ –ü–æ–ª—É—á–∞—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä...\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–æ—Ä –∏–∑ –ë–î
        await send_existing_analysis(user_id, "sun", cb_msg, profile_id)
        
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ (–¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)"
        )
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
        await cb_msg.answer(
            "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ\n\n"
            "üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ "
            "–ø–æ –°–æ–ª–Ω—Ü—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
            "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ (–≤–º–µ—Å—Ç–æ 999‚ÇΩ)\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞\n"
            "‚Ä¢ –û—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            callback_data=f"pay_sun:{profile_id}" if profile_id else "pay_sun"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data=f"explore_other_areas:{profile_id}" if profile_id else "explore_other_areas"
                        )
                    ]
                ]
            )
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ (–¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç)"
        )


@dp.callback_query(F.data.startswith("explore_mercury"))
async def on_explore_mercury(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–µ—Ä–∫—É—Ä–∏–π'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ú–µ—Ä–∫—É—Ä–∏—é
    has_access = await check_user_payment_access(user_id, "mercury")
    
    if has_access:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä
        await cb_msg.answer(
            "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π\n\n"
            "üîÆ –ü–æ–ª—É—á–∞—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä...\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–æ—Ä –∏–∑ –ë–î
        await send_existing_analysis(user_id, "mercury", cb_msg, profile_id)
        
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –ú–µ—Ä–∫—É—Ä–∏—è (–¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)"
        )
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
        await cb_msg.answer(
            "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π\n\n"
            "üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ "
            "–ø–æ –ú–µ—Ä–∫—É—Ä–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
            "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ (–≤–º–µ—Å—Ç–æ 999‚ÇΩ)\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏ –∏ –º—ã—à–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –£–º–µ–Ω–∏–µ —É–±–µ–∂–¥–∞—Ç—å –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è\n"
            "‚Ä¢ –õ—ë–≥–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —è—Å–Ω–∞—è –ø–æ–¥–∞—á–∞ –∏–¥–µ–π\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            callback_data="pay_mercury"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –ú–µ—Ä–∫—É—Ä–∏—è (–¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç)"
        )


@dp.callback_query(F.data.startswith("explore_venus"))
async def on_explore_venus(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ–Ω–µ—Ä–∞'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –í–µ–Ω–µ—Ä–µ
    has_access = await check_user_payment_access(user_id, "venus")
    
    if has_access:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä
        await cb_msg.answer(
            "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞\n\n"
            "üîÆ –ü–æ–ª—É—á–∞—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä...\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–æ—Ä –∏–∑ –ë–î
        await send_existing_analysis(user_id, "venus", cb_msg, profile_id)
        
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –í–µ–Ω–µ—Ä—ã (–¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)"
        )
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
        await cb_msg.answer(
            "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞\n\n"
            "üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ "
            "–ø–æ –í–µ–Ω–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
            "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ (–≤–º–µ—Å—Ç–æ 999‚ÇΩ)\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä –±–ª–æ–∫–æ–≤ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö\n"
            "‚Ä¢ –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—Ç—è–≥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —ë–º–∫–æ—Å—Ç–∏",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            callback_data="pay_venus"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –í–µ–Ω–µ—Ä—ã (–¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç)"
        )


@dp.callback_query(F.data.startswith("explore_mars"))
async def on_explore_mars(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–∞—Ä—Å'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ú–∞—Ä—Å—É
    has_access = await check_user_payment_access(user_id, "mars")
    
    if has_access:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä
        await cb_msg.answer(
            "‚ôÇÔ∏è –ú–∞—Ä—Å\n\n"
            "üîÆ –ü–æ–ª—É—á–∞—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä...\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–æ—Ä –∏–∑ –ë–î
        await send_existing_analysis(user_id, "mars", cb_msg, profile_id)
        
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞ (–¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)"
        )
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
        await cb_msg.answer(
            "‚ôÇÔ∏è –ú–∞—Ä—Å\n\n"
            "üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ "
            "–ø–æ –ú–∞—Ä—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
            "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ (–≤–º–µ—Å—Ç–æ 999‚ÇΩ)\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –†–æ—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Å–∏–ª—ã –≤–æ–ª–∏\n"
            "‚Ä¢ –†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö\n"
            "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –¥—É—Ö –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å\n"
            "‚Ä¢ –£–º–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã\n"
            "‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∏–Ω–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            callback_data="pay_mars"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_other_areas"
                        )
                    ]
                ]
            )
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞ (–¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç)"
        )


# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω—ã
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_get_recommendations


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –°–æ–ª–Ω—Ü—É
@dp.callback_query(F.data.startswith("sun_question_"))
async def on_sun_question_topic(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –°–æ–ª–Ω—Ü—É"""
    topic = (callback.data or "").replace("sun_question_", "")

    topic_names = {
        "relationships": "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "career": "üíº –ö–∞—Ä—å–µ—Ä–∞",
        "family": "üè† –°–µ–º—å—è",
        "health": "üí™ –ó–¥–æ—Ä–æ–≤—å–µ",
        "finances": "üí∞ –§–∏–Ω–∞–Ω—Å—ã",
        "goals": "üéØ –¶–µ–ª–∏ –∏ –º–µ—á—Ç—ã"
    }

    topic_name = topic_names.get(topic, topic)

    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        f"{topic_name}\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –ª—É—á—à–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è?\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ?\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è?\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π?\n\n"
        "–Ø –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã! üîÆ"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(QuestionForm.waiting_for_question)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data.startswith("question_"))
async def on_question_topic(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    topic = (callback.data or "").replace("question_", "")

    topic_names = {
        "relationships": "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "career": "üíº –ö–∞—Ä—å–µ—Ä–∞",
        "family": "üè† –°–µ–º—å—è",
        "health": "üí™ –ó–¥–æ—Ä–æ–≤—å–µ"
    }

    topic_name = topic_names.get(topic, topic)

    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        f"{topic_name}\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –ª—É—á—à–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è?\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ?\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è?\n\n"
        "–Ø –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã! ‚ú®"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏
    await state.clear()
    
    help_text = """
üîÆ –Ø –±–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!
    """
    await message.answer(help_text)


@dp.message()
async def echo_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã
    current_state = await state.get_state()
    if current_state in [
        ProfileForm.waiting_for_first_name,
        ProfileForm.waiting_for_birth_date,
        ProfileForm.waiting_for_birth_city,
        ProfileForm.waiting_for_birth_city_confirm,
        ProfileForm.waiting_for_birth_time_accuracy,
        ProfileForm.waiting_for_birth_time_local,
        ProfileForm.waiting_for_birth_time_confirm,
        ProfileForm.waiting_for_birth_time_approx_confirm,
        ProfileForm.waiting_for_birth_time_unknown_confirm
    ]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        # –ü—É—Å—Ç—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    if current_state in [
        AdditionalProfileForm.waiting_for_additional_name,
        AdditionalProfileForm.waiting_for_additional_birth_date,
        AdditionalProfileForm.waiting_for_additional_birth_city,
        AdditionalProfileForm.waiting_for_additional_birth_city_confirm,
        AdditionalProfileForm.waiting_for_additional_birth_time_accuracy,
        AdditionalProfileForm.waiting_for_additional_birth_time_local,
        AdditionalProfileForm.waiting_for_additional_birth_time_confirm,
        AdditionalProfileForm.waiting_for_additional_birth_time_approx_confirm,
        AdditionalProfileForm.waiting_for_additional_birth_time_unknown_confirm
    ]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        # –ü—É—Å—Ç—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    if current_state == QuestionForm.waiting_for_question:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        # –ü—É—Å—Ç—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_session() as session:
        uid = cast(TgUser, message.from_user).id
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == uid)
        )
        user = res.scalar_one_or_none()
        if user is not None:
            user.last_seen_at = datetime.now(timezone.utc)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


async def send_existing_analysis(user_id: int, planet: str, message_obj, profile_id: Optional[int] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        from models import User, Prediction, PredictionType, Planet
        from sqlalchemy import select
        
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message_obj.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
            planet_enum = Planet(planet)
            query_conditions = [
                Prediction.user_id == user.user_id,
                Prediction.planet == planet_enum,
                Prediction.prediction_type == PredictionType.paid
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è profile_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if profile_id:
                query_conditions.append(Prediction.profile_id == profile_id)
            else:
                query_conditions.append(Prediction.profile_id.is_(None))
            
            prediction_result = await session.execute(
                select(Prediction).where(*query_conditions).order_by(Prediction.created_at.desc())
            )
            
            prediction = prediction_result.scalar_one_or_none()
            
            if prediction:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–æ—Ä–∞
                analysis_text = getattr(prediction, f"{planet}_analysis", None)
                
                if analysis_text:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä
                    planet_emojis = {
                        "sun": "‚òÄÔ∏è",
                        "mercury": "‚òøÔ∏è", 
                        "venus": "‚ôÄÔ∏è",
                        "mars": "‚ôÇÔ∏è"
                    }
                    
                    emoji = planet_emojis.get(planet, "üîÆ")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
                    if profile_id:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                        from models import AdditionalProfile
                        profile_result = await session.execute(
                            select(AdditionalProfile).where(AdditionalProfile.profile_id == profile_id)
                        )
                        profile = profile_result.scalar_one_or_none()
                        profile_name = profile.full_name if profile else "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
                        header = f"{emoji} –†–∞–∑–±–æ—Ä {planet.title()} –¥–ª—è {profile_name}\n\n"
                    else:
                        header = f"{emoji} **{planet.title()}**\n\n"
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    max_length = 4000
                    if len(analysis_text) <= max_length:
                        await message_obj.answer(
                            f"{header}{analysis_text}"
                        )
                    else:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                        parts = [
                            analysis_text[i:i+max_length] 
                            for i in range(0, len(analysis_text), max_length)
                        ]
                        for i, part in enumerate(parts):
                            if i == 0:
                                await message_obj.answer(
                                    f"{emoji} **{planet.title()}**\n\n{part}"
                                )
                            else:
                                await message_obj.answer(part)
                    
                    logger.info(
                        f"‚úÖ Existing analysis sent to user {user_id} for planet {planet}"
                    )
                else:
                    await message_obj.answer(
                        f"‚ùå –†–∞–∑–±–æ—Ä –¥–ª—è {planet} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
            else:
                await message_obj.answer(
                    f"‚ùå –†–∞–∑–±–æ—Ä –¥–ª—è {planet} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
    except Exception as e:
        logger.error(f"‚ùå Error sending existing analysis: {e}")
        await message_obj.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–µ—Ç
@dp.callback_query(F.data.startswith("pay_sun"))
async def on_pay_sun(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞ –°–æ–ª–Ω—Ü–µ"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    if payment_handler is None:
        await cb_msg.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_sun"
                        )
                    ]
                ]
            )
        )
        return
    
    try:
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = payment_handler.create_payment_data(
            user_id=user_id,
            planet="sun",
            description="–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞",
            profile_id=profile_id
        )
        logger.info(f"üî• –î–ê–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ê –°–û–ó–î–ê–ù–´: {payment_data}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        payment_result = await payment_handler.create_payment(payment_data)
        logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–ó–î–ê–ù –í YOOKASSA: {payment_result}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ ID –ø–ª–∞—Ç–µ–∂–∞
        payment_url = payment_result.get("payment_url")
        external_payment_id = payment_result.get("payment_id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î...")
        from models import PlanetPayment, PaymentType, PaymentStatus, Planet, User
        from sqlalchemy import select
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
            logger.info(f"üî• –ò–©–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å telegram_id: {user_id}")
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"‚ùå User with telegram_id {user_id} not found")
                return
            
            logger.info(f"üî• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ô–î–ï–ù: user_id={user.user_id}, telegram_id={user.telegram_id}")
            
            payment_record = PlanetPayment(
                user_id=user.user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
                payment_type=PaymentType.single_planet,
                planet=Planet.sun,
                status=PaymentStatus.pending,
                amount_kopecks=1000,  # 10 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                external_payment_id=external_payment_id,
                payment_url=payment_url,
                profile_id=profile_id,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
                notes="–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞"
            )
            logger.info(f"üî• –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –ü–õ–ê–¢–ï–ñ–ê: {payment_record}")
            
            session.add(payment_record)
            await session.commit()
            
            logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–•–†–ê–ù–ï–ù –í –ë–î! ID: {payment_record.payment_id}")
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (user_id: {user.user_id}) –∑–∞ –°–æ–ª–Ω—Ü–µ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        await cb_msg.answer(
            "‚òÄÔ∏è –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞\n"
            "‚Ä¢ –û—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏\n\n"
            "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            url=payment_url
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data=f"explore_sun:{profile_id}" if profile_id else "explore_sun"
                        )
                    ]
                ]
            )
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–õ–ê–¢–ï–ñ–ê –ó–ê –°–û–õ–ù–¶–ï: {e}")
        logger.error(f"‚ùå –¢–ò–ü –û–®–ò–ë–ö–ò: {type(e)}")
        logger.error(f"‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò: {str(e)}")
        import traceback
        logger.error(f"‚ùå TRACEBACK: {traceback.format_exc()}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_sun"
                        )
                    ]
                ]
            )
        )


@dp.callback_query(F.data == "pay_mars")
async def on_pay_mars(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞ –ú–∞—Ä—Å"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    if payment_handler is None:
        await cb_msg.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_mars"
                        )
                    ]
                ]
            )
        )
        return
    
    try:
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –ó–ê –ú–ê–†–° –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = payment_handler.create_payment_data(
            user_id=user_id,
            planet="mars",
            description="–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞"
        )
        logger.info(f"üî• –î–ê–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ê –°–û–ó–î–ê–ù–´: {payment_data}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        payment_result = await payment_handler.create_payment(payment_data)
        logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–ó–î–ê–ù –í YOOKASSA: {payment_result}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ ID –ø–ª–∞—Ç–µ–∂–∞
        payment_url = payment_result.get("payment_url")
        external_payment_id = payment_result.get("payment_id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î...")
        from models import PlanetPayment, PaymentType, PaymentStatus, Planet, User
        from sqlalchemy import select
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
            logger.info(f"üî• –ò–©–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å telegram_id: {user_id}")
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"‚ùå User with telegram_id {user_id} not found")
                return
            
            logger.info(f"üî• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ô–î–ï–ù: user_id={user.user_id}, telegram_id={user.telegram_id}")
            
            payment_record = PlanetPayment(
                user_id=user.user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
                payment_type=PaymentType.single_planet,
                planet=Planet.mars,
                status=PaymentStatus.pending,
                amount_kopecks=1000,  # 10 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                external_payment_id=external_payment_id,
                payment_url=payment_url,
                notes="–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞"
            )
            logger.info(f"üî• –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –ü–õ–ê–¢–ï–ñ–ê: {payment_record}")
            
            session.add(payment_record)
            await session.commit()
            
            logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–•–†–ê–ù–ï–ù –í –ë–î! ID: {payment_record.payment_id}")
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (user_id: {user.user_id}) –∑–∞ –ú–∞—Ä—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        await cb_msg.answer(
            "‚ôÇÔ∏è –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–±–æ—Ä –ú–∞—Ä—Å–∞\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –†–æ—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Å–∏–ª—ã –≤–æ–ª–∏\n"
            "‚Ä¢ –†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö\n"
            "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –¥—É—Ö –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å\n"
            "‚Ä¢ –£–º–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã\n"
            "‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∏–Ω–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ\n\n"
            "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            url=payment_url
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_mars"
                        )
                    ]
                ]
            )
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–õ–ê–¢–ï–ñ–ê –ó–ê –ú–ê–†–°: {e}")
        logger.error(f"‚ùå –¢–ò–ü –û–®–ò–ë–ö–ò: {type(e)}")
        logger.error(f"‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò: {str(e)}")
        import traceback
        logger.error(f"‚ùå TRACEBACK: {traceback.format_exc()}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_mars"
                        )
                    ]
                ]
            )
        )


@dp.callback_query(F.data == "pay_mercury")
async def on_pay_mercury(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞ –ú–µ—Ä–∫—É—Ä–∏–π"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    if payment_handler is None:
        await cb_msg.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_mercury"
                        )
                    ]
                ]
            )
        )
        return
    
    try:
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –ó–ê –ú–ï–†–ö–£–†–ò–ô –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = payment_handler.create_payment_data(
            user_id=user_id,
            planet="mercury",
            description="–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ú–µ—Ä–∫—É—Ä–∏—è"
        )
        logger.info(f"üî• –î–ê–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ê –°–û–ó–î–ê–ù–´: {payment_data}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        payment_result = await payment_handler.create_payment(payment_data)
        logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–ó–î–ê–ù –í YOOKASSA: {payment_result}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ ID –ø–ª–∞—Ç–µ–∂–∞
        payment_url = payment_result.get("payment_url")
        external_payment_id = payment_result.get("payment_id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î...")
        from models import PlanetPayment, PaymentType, PaymentStatus, Planet, User
        from sqlalchemy import select
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
            logger.info(f"üî• –ò–©–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å telegram_id: {user_id}")
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"‚ùå User with telegram_id {user_id} not found")
                return
            
            logger.info(f"üî• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ô–î–ï–ù: user_id={user.user_id}, telegram_id={user.telegram_id}")
            
            payment_record = PlanetPayment(
                user_id=user.user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
                payment_type=PaymentType.single_planet,
                planet=Planet.mercury,
                status=PaymentStatus.pending,
                amount_kopecks=1000,  # 10 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                external_payment_id=external_payment_id,
                payment_url=payment_url,
                notes="–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ä–∞–∑–±–æ—Ä –ú–µ—Ä–∫—É—Ä–∏—è"
            )
            logger.info(f"üî• –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –ü–õ–ê–¢–ï–ñ–ê: {payment_record}")
            
            session.add(payment_record)
            await session.commit()
            
            logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–•–†–ê–ù–ï–ù –í –ë–î! ID: {payment_record.payment_id}")
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (user_id: {user.user_id}) –∑–∞ –ú–µ—Ä–∫—É—Ä–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        await cb_msg.answer(
            "‚òøÔ∏è –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–±–æ—Ä –ú–µ—Ä–∫—É—Ä–∏—è\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏ –∏ –º—ã—à–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –£–º–µ–Ω–∏–µ —É–±–µ–∂–¥–∞—Ç—å –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è\n"
            "‚Ä¢ –õ—ë–≥–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —è—Å–Ω–∞—è –ø–æ–¥–∞—á–∞ –∏–¥–µ–π\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤\n\n"
            "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            url=payment_url
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_mercury"
                        )
                    ]
                ]
            )
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–õ–ê–¢–ï–ñ–ê –ó–ê –ú–ï–†–ö–£–†–ò–ô: {e}")
        logger.error(f"‚ùå –¢–ò–ü –û–®–ò–ë–ö–ò: {type(e)}")
        logger.error(f"‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò: {str(e)}")
        import traceback
        logger.error(f"‚ùå TRACEBACK: {traceback.format_exc()}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_mercury"
                        )
                    ]
                ]
            )
        )


@dp.callback_query(F.data == "pay_venus")
async def on_pay_venus(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞ –í–µ–Ω–µ—Ä—É"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    user_id = callback.from_user.id
    
    if payment_handler is None:
        await cb_msg.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_venus"
                        )
                    ]
                ]
            )
        )
        return
    
    try:
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –ó–ê –í–ï–ù–ï–†–£ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = payment_handler.create_payment_data(
            user_id=user_id,
            planet="venus",
            description="–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –í–µ–Ω–µ—Ä—ã"
        )
        logger.info(f"üî• –î–ê–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ê –°–û–ó–î–ê–ù–´: {payment_data}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        payment_result = await payment_handler.create_payment(payment_data)
        logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–ó–î–ê–ù –í YOOKASSA: {payment_result}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ ID –ø–ª–∞—Ç–µ–∂–∞
        payment_url = payment_result.get("payment_url")
        external_payment_id = payment_result.get("payment_id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        logger.info(f"üî• –ù–ê–ß–ò–ù–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î...")
        from models import PlanetPayment, PaymentType, PaymentStatus, Planet, User
        from sqlalchemy import select
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
            logger.info(f"üî• –ò–©–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø —Å telegram_id: {user_id}")
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"‚ùå User with telegram_id {user_id} not found")
                return
            
            logger.info(f"üî• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ô–î–ï–ù: user_id={user.user_id}, telegram_id={user.telegram_id}")
            
            payment_record = PlanetPayment(
                user_id=user.user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
                payment_type=PaymentType.single_planet,
                planet=Planet.venus,
                status=PaymentStatus.pending,
                amount_kopecks=1000,  # 10 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                external_payment_id=external_payment_id,
                payment_url=payment_url,
                notes="–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ä–∞–∑–±–æ—Ä –í–µ–Ω–µ—Ä—ã"
            )
            logger.info(f"üî• –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –ü–õ–ê–¢–ï–ñ–ê: {payment_record}")
            
            session.add(payment_record)
            await session.commit()
            
            logger.info(f"üî• –ü–õ–ê–¢–ï–ñ –°–û–•–†–ê–ù–ï–ù –í –ë–î! ID: {payment_record.payment_id}")
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (user_id: {user.user_id}) –∑–∞ –í–µ–Ω–µ—Ä—É")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        await cb_msg.answer(
            "‚ôÄÔ∏è –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–±–æ—Ä –í–µ–Ω–µ—Ä—ã\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10‚ÇΩ\n\n"
            "üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä –±–ª–æ–∫–æ–≤ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö\n"
            "‚Ä¢ –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—Ç—è–≥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —ë–º–∫–æ—Å—Ç–∏\n\n"
            "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 10‚ÇΩ",
                            url=payment_url
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_venus"
                        )
                    ]
                ]
            )
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–õ–ê–¢–ï–ñ–ê –ó–ê –í–ï–ù–ï–†–£: {e}")
        logger.error(f"‚ùå –¢–ò–ü –û–®–ò–ë–ö–ò: {type(e)}")
        logger.error(f"‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò: {str(e)}")
        import traceback
        logger.error(f"‚ùå TRACEBACK: {traceback.format_exc()}")
        await cb_msg.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_venus"
                        )
                    ]
                ]
            )
        )


@dp.callback_query(F.data.startswith("pay_all_planets"))
async def on_pay_all_planets(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã"""
    from all_planets_handler import get_all_planets_handler
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    logger.info(f"on_pay_all_planets called with profile_id={profile_id}")
    
    handler = get_all_planets_handler()
    if handler:
        await handler.handle_payment_request(callback, profile_id)
    else:
        await callback.answer()
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="explore_all_planets"
                        )
                    ]
                ]
            )
        )


@dp.callback_query(F.data.startswith("next_planet"))
async def on_next_planet(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞'"""
    from all_planets_handler import get_all_planets_handler
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º profile_id –∏–∑ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    profile_id = None
    if ":" in callback.data:
        try:
            profile_id = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            profile_id = None
    
    logger.info(f"on_next_planet called with profile_id={profile_id}")
    
    handler = get_all_planets_handler()
    if handler:
        await handler.handle_next_planet(callback, profile_id)
    else:
        await callback.answer()
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )
                    ]
                ]
            )
        )


async def check_user_payment_access(user_id: int, planet: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–µ—Ç–µ"""
    from models import PlanetPayment, PaymentStatus, PaymentType, Planet
    
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—Ç–∞ –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã
        all_planets_payment = await session.execute(
            select(PlanetPayment).where(
                PlanetPayment.user_id == user_id,
                PlanetPayment.payment_type == PaymentType.all_planets,
                PlanetPayment.status == PaymentStatus.completed
            )
        )
        if all_planets_payment.scalar_one_or_none():
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–ª–∞–Ω–µ—Ç—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ planet –Ω–µ "all_planets")
        if planet != "all_planets":
            try:
                planet_enum = Planet(planet)
                single_planet_payment = await session.execute(
                    select(PlanetPayment).where(
                        PlanetPayment.user_id == user_id,
                        PlanetPayment.payment_type == PaymentType.single_planet,
                        PlanetPayment.planet == planet_enum,
                        PlanetPayment.status == PaymentStatus.completed
                    )
                )
                return single_planet_payment.scalar_one_or_none() is not None
            except ValueError:
                # –ï—Å–ª–∏ planet –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è enum Planet
                return False
        else:
            return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    init_engine()
    from db import engine as _engine
    db_engine: AsyncEngine = _engine  # type: ignore[assignment]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
    global payment_handler
    payment_handler = init_payment_handler(bot)
    logger.info(
        f"Payment handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {payment_handler is not None}"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç
    all_planets_handler = init_all_planets_handler(bot, payment_handler)
    await all_planets_handler.initialize()
    logger.info(
        f"All planets handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {all_planets_handler is not None}"
    )

    # –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ/–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ):
    try:
        await ensure_gender_enum(db_engine)
        await ensure_birth_date_nullable(db_engine)
        await ensure_zodiac_enum_ru(db_engine)
        await ensure_planet_enum(db_engine)
        await ensure_prediction_type_enum(db_engine)
        await ensure_payment_type_enum(db_engine)
        await ensure_payment_status_enum(db_engine)
    # create_all –±–µ–∑–æ–ø–∞—Å–µ–Ω: —Å–æ–∑–¥–∞—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã,
    # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–µ —Ç—Ä–æ–Ω–µ—Ç
        await create_all(db_engine)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –ë–î: {e}")

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        await dispose_engine()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
