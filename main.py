import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    User as TgUser,
)
from typing import cast
from db import (
    init_engine,
    dispose_engine,
    ensure_gender_enum,
    ensure_birth_date_nullable,
    ensure_zodiac_enum_ru,
    ensure_planet_enum,
    ensure_prediction_type_enum,
)
from models import create_all
from sqlalchemy.ext.asyncio import AsyncEngine
from db import get_session
from models import User as DbUser, Gender, ZodiacSignRu
from sqlalchemy import select
from datetime import datetime, timezone, date
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, LOG_LEVEL, LOG_FORMAT
from geocoding import geocode_city_ru, GeocodingError
from timezone_utils import resolve_timezone, format_utc_offset
from astrology_handlers import (
    start_moon_analysis,
    check_existing_moon_prediction
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, LOG_LEVEL), format=LOG_FORMAT)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞
if BOT_TOKEN in ["YOUR_BOT_TOKEN_HERE", "–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å"]:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    print("–ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    print("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ–∑—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    tg_user = cast(TgUser, message.from_user)
    lang = tg_user.language_code or "ru"
    now = datetime.now(timezone.utc)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == tg_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            user = DbUser(
                telegram_id=tg_user.id,
                username=tg_user.username,
                first_name=tg_user.first_name,
                last_name=tg_user.last_name,
                lang=lang,
                joined_at=now,
                last_seen_at=now,
            )
            session.add(user)
        else:
            # –û–±–Ω–æ–≤–∏–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏ –æ—Ç–º–µ—Ç–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            user.username = tg_user.username
            user.first_name = tg_user.first_name
            user.last_name = tg_user.last_name
            user.lang = lang or user.lang
            user.last_seen_at = now

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã
    has_moon_analysis = await check_existing_moon_prediction(tg_user.id)

    if has_moon_analysis:
        # –ï—Å–ª–∏ —Ä–∞–∑–±–æ—Ä –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.id} —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ä–∞–∑–±–æ—Ä–æ–º "
            "–ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )
    else:
        # –ï—Å–ª–∏ —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            (
                "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–ª–∏—Ç üêà‚Äç‚¨õ\n"
                "–Ø —É–º–Ω—ã–π –±–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
                "ü§ñüîÆ\n\n"
                "ü´Ç –°—Ç–∞–Ω—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –∞—Å—Ç—Ä–æ-–ø–æ–º–æ—â–Ω–∏–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å "
                "–ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
                "ü™ê –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å "
                "–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ‚Äì —è —É–∂–µ –ø–æ–∑–∞–±–æ—Ç–∏–ª–∞—Å—å –æ "
                "–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏\n\n"
                "üß† –Ø –Ω–µ –∫–æ–ø–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äì –º–æ–∏ "
                "—Ä–∞–∑–±–æ—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –æ–ø—ã—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –∏ –µ–≥–æ "
                "—Ä–∞–±–æ—Ç–µ —Å –ª—é–¥—å–º–∏\n\n"
                "üòé –î–∞–º –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –≤–∞–∂–Ω—ã–º —Å—Ñ–µ—Ä–∞–º: —Ñ–∏–Ω–∞–Ω—Å—ã, "
                "–æ—Ç–Ω–æ—à–µ–Ω–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ"
            )
        )

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                        url="https://disk.yandex.ru/i/DwatWs4N5h5HFA"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û–∫–µ–π üëåüèº",
                        callback_data="ok",
                    )
                ]
            ]
        )

        await message.answer(
            (
                "–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–ª—É—á—à–µ, —á—Ç–æ–±—ã –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã "
                "–ø—Ä–∏–Ω–æ—Å–∏–ª–∏ —Ç–µ–±–µ –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã ü§ó\n\n"
                "‚úçüèº –ó–∞–ø–æ–ª–Ω–∏—à—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É?\n\n"
                "–Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å "
                "–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ "
                "‚Äî –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã üîêü´±üèª‚Äçü´≤üèº"
            ),
            reply_markup=kb,
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.id} –±–µ–∑ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª –∞–Ω–∫–µ—Ç—É")


@dp.callback_query(F.data == "ok")
async def on_ok(callback: CallbackQuery):
    """–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–û–∫–µ–π" ‚Äî —Å—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª"""
    await callback.answer()
    kb = build_gender_kb(selected=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª üëáüèº",
        reply_markup=kb,
    )


class ProfileForm(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_birth_date = State()
    waiting_for_birth_city = State()
    waiting_for_birth_city_confirm = State()
    waiting_for_birth_time_accuracy = State()
    waiting_for_birth_time_local = State()
    waiting_for_birth_time_confirm = State()
    waiting_for_birth_time_approx_confirm = State()
    waiting_for_birth_time_unknown_confirm = State()


def build_gender_kb(selected: str | None) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞. –ï—Å–ª–∏ selected –∑–∞–¥–∞–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ–∫ –∏
    –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.
    """
    female_text = ("‚úÖ " if selected == "female" else "") + "üë©üèª –ñ–µ–Ω—Å–∫–∏–π"
    male_text = ("‚úÖ " if selected == "male" else "") + "üë®üèº –ú—É–∂—Å–∫–æ–π"

    rows = [
        [
            InlineKeyboardButton(
                text=female_text, callback_data="gender:female"
            )
        ],
        [
            InlineKeyboardButton(
                text=male_text, callback_data="gender:male"
            )
        ],
    ]
    if selected in {"male", "female"}:
        rows.append(
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="gender_confirm"
                )
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def show_main_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    —Ä–∞–∑–±–æ—Ä–æ–º"""
    text = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="personal_cabinet"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí≥ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä", callback_data="buy_analysis"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üÜï –ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ",
                    callback_data="new_analysis"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì FAQ", callback_data="faq"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üÜò –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", callback_data="support"
                )
            ]
        ]
    )

    if hasattr(message_or_callback, 'message'):
        # –≠—Ç–æ callback
        cb_msg = cast(Message, message_or_callback.message)
        await cb_msg.answer(text, reply_markup=kb)
    else:
        # –≠—Ç–æ message
        await message_or_callback.answer(text, reply_markup=kb)


async def show_profile_completion_message(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    text = (
        "–°–º–æ—Ç—Ä–∏, —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å –Ω–∞—à—É —Ä–∞–±–æ—Ç—É —Å —Ç–µ–±—è, –∞ –∏–º–µ–Ω–Ω–æ —Å —Ä–∞–∑–±–æ—Ä–∞ "
        "—Ç–≤–æ–µ–π –õ—É–Ω—ã üåô\n\n"
        "–û–±—ä—è—Å–Ω—é –ø–æ—á–µ–º—Éüëáüèº\n\n"
        "üåí –õ—É–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –µ—â–µ –≤ —É—Ç—Ä–æ–±–µ –º–∞—Ç–µ—Ä–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å—é –∂–∏–∑–Ω—å, –æ—Ç –Ω–µ—ë "
        "–∑–∞–≤–∏—Å—è—Ç —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–æ, –∫–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å –º–∏—Ä –∏ –¥–∞–∂–µ "
        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ\n\n"
        "üåì –≠—Ç–∞ –ø–ª–∞–Ω–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–º —Ç–≤–æ–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞: –µ—Å–ª–∏ –æ–Ω "
        "–Ω–µ –ø—Ä–æ—á–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥—É—Ç –∏ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ "
        "—Ä–∞–∑–±–∏—Ä–∞—Ç—å –≤—Å–µ–º–∏ –ª—é–±–∏–º—ã—Ö –í–µ–Ω–µ—Ä—É –∏ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ;)\n\n"
        "üåî –ü–æ–∫–∞ –≤—Å–µ –±–µ–≥—É—Ç, —Å–ø–µ—à–∞—Ç –∏ –∑–∞–±—ã–≤–∞—é—Ç –ø—Ä–æ —Å–µ–±—è, —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–µ –±–æ—è—Ç—å—Å—è "
        "–≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ, —á—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Å –Ω–∞—à–µ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–µ–π –∫ "
        "–¥–æ—Å—Ç–∏–≥–∞—Ç–æ—Ä—Å—Ç–≤—É, —Å–æ–≥–ª–∞—Å–∏—Å—å?\n\n"
        "üåï –ù–∏–∫–∞–∫–∏—Ö –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—á–µ–ª–µ–π ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø–æ–∫–æ–π–Ω–æ–µ –∏ "
        "—É–≤–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∂–∏–∑–Ω–∏"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–Ω–µ–º", callback_data="start_moon_analysis"
                )
            ]
        ]
    )

    if hasattr(message_or_callback, 'answer'):
        # –≠—Ç–æ callback
        cb_msg = cast(Message, message_or_callback.message)
        await cb_msg.answer(text, reply_markup=kb)
    else:
        # –≠—Ç–æ message
        await message_or_callback.answer(text, reply_markup=kb)


def zodiac_sign_ru_for_date(d: date) -> ZodiacSignRu:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º) –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.

    –î–∏–∞–ø–∞–∑–æ–Ω—ã (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –ø–æ –∑–∞–ø–∞–¥–Ω–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏:
    –ö–æ–∑–µ—Ä–æ–≥ 22.12‚Äì19.01, –í–æ–¥–æ–ª–µ–π 20.01‚Äì18.02, –†—ã–±—ã 19.02‚Äì20.03,
    –û–≤–µ–Ω 21.03‚Äì19.04, –¢–µ–ª–µ—Ü 20.04‚Äì20.05, –ë–ª–∏–∑–Ω–µ—Ü—ã 21.05‚Äì20.06,
    –†–∞–∫ 21.06‚Äì22.07, –õ–µ–≤ 23.07‚Äì22.08, –î–µ–≤–∞ 23.08‚Äì22.09,
    –í–µ—Å—ã 23.09‚Äì22.10, –°–∫–æ—Ä–ø–∏–æ–Ω 23.10‚Äì21.11, –°—Ç—Ä–µ–ª–µ—Ü 22.11‚Äì21.12.
    """
    m, day = d.month, d.day

    if (m == 12 and day >= 22) or (m == 1 and day <= 19):
        return ZodiacSignRu.kozerog
    elif (m == 1 and day >= 20) or (m == 2 and day <= 18):
        return ZodiacSignRu.vodolei
    elif (m == 2 and day >= 19) or (m == 3 and day <= 20):
        return ZodiacSignRu.ryby
    elif (m == 3 and day >= 21) or (m == 4 and day <= 19):
        return ZodiacSignRu.oven
    elif (m == 4 and day >= 20) or (m == 5 and day <= 20):
        return ZodiacSignRu.telec
    elif (m == 5 and day >= 21) or (m == 6 and day <= 20):
        return ZodiacSignRu.bliznecy
    elif (m == 6 and day >= 21) or (m == 7 and day <= 22):
        return ZodiacSignRu.rak
    elif (m == 7 and day >= 23) or (m == 8 and day <= 22):
        return ZodiacSignRu.lev
    elif (m == 8 and day >= 23) or (m == 9 and day <= 22):
        return ZodiacSignRu.deva
    elif (m == 9 and day >= 23) or (m == 10 and day <= 22):
        return ZodiacSignRu.vesy
    elif (m == 10 and day >= 23) or (m == 11 and day <= 21):
        return ZodiacSignRu.skorpion
    else:  # (m == 11 and day >= 22) or (m == 12 and day <= 21)
        return ZodiacSignRu.strelec


# ======== –í–æ–ø—Ä–æ—Å: –í–∞—à –ø–æ–ª ========
@dp.message(Command("gender"))
async def ask_gender(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú—É–∂—Å–∫–æ–π", callback_data="gender:male"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female"
                )
            ],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)


@dp.callback_query(F.data.startswith("gender:"))
async def set_gender(callback: CallbackQuery, state: FSMContext):
    cb_data = cast(str, callback.data)
    _, value = cb_data.split(":", 1)
    if value not in {"male", "female"}:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å—Ä–∞–∑—É
    await state.update_data(pending_gender=value)

    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–∞ –∏ –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–∫‚Äë–º–∞—Ä–∫–æ–π + –¥–æ–±–∞–≤–ª—è–µ–º
    # –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    kb = build_gender_kb(selected=value)
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=kb)
    except Exception:
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤—ã–±–æ—Ä –ø–æ–ª–∞", reply_markup=kb)
    await callback.answer()


@dp.callback_query(F.data == "gender_confirm")
async def confirm_gender(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    value = data.get("pending_gender")
    if value not in {"male", "female"}:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª", show_alert=True)
        return
    cb_user = cast(TgUser, callback.from_user)
    tg_id = cb_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –ë–î
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == tg_id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É: /start", show_alert=True
            )
            await state.clear()
            return
        user.gender = Gender(value)

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ
    await state.update_data(pending_gender=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–Ω–∫–µ—Ç—ã ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üí´")
    await state.set_state(ProfileForm.waiting_for_first_name)
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@dp.message(ProfileForm.waiting_for_first_name)
async def receive_first_name(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with get_session() as session:
        uid = cast(TgUser, message.from_user).id
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == uid)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´"
            )
            await state.clear()
            return
        user.first_name = name

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(ProfileForm.waiting_for_birth_date)
    await message.answer(
        f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}üôåüèº\n\n"
        "üìÜ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–ø—Ä–∏–º–µ—Ä: 23.04.1987"
    )


@dp.message(ProfileForm.waiting_for_birth_date)
async def receive_birth_date(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    try:
        dt = datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
            "–î–î.–ú–ú.–ì–ì–ì–ì\n–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.04.1987"
        )
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    await state.update_data(pending_birth_date=dt.isoformat())

    date_str = dt.strftime("%d.%m.%Y")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–µ—Ä–Ω–æ", callback_data="bdate:confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="bdate:redo"
                )
            ],
        ]
    )
    await message.answer(
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_str} -\n" "–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº",
        reply_markup=kb,
    )
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–ø–µ—Ä–µ–≤–≤–æ–¥–∞
    await state.set_state(ProfileForm.waiting_for_birth_date)


@dp.callback_query(F.data == "bdate:confirm")
async def on_birth_date_confirm(
    callback: CallbackQuery, state: FSMContext
):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ—Ä–æ–¥—É
    data = await state.get_data()
    iso = data.get("pending_birth_date")
    if not iso:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    from datetime import date as _date
    try:
        dt = _date.fromisoformat(iso)
    except Exception:
        await callback.answer(
            "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        return

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return
        user.birth_date = dt
        sign_enum = zodiac_sign_ru_for_date(dt)
        user.zodiac_sign = sign_enum

    await state.update_data(pending_birth_date=None)
    await state.set_state(ProfileForm.waiting_for_birth_city)

    cb_msg = cast(Message, callback.message)
    sign = sign_enum.value
    await cb_msg.answer(
        f"–ü–æ–Ω—è—Ç–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç—ã —É –Ω–∞—Å {sign} ü§≠ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –µ—â–µ "
        "–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–µ \n\n\n"
        "üìç –î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏ –º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –∂–µ –±–ª–∏–∂–∞–π—à–∏–π "
        "–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ \n"
        "–ø—Ä–∏–º–µ—Ä: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await callback.answer()


@dp.callback_query(F.data == "bdate:redo")
async def on_birth_date_redo(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Å–Ω–æ–≤–∞
    await state.update_data(pending_birth_date=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.04.1987"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_date)
    await callback.answer()


@dp.message(ProfileForm.waiting_for_birth_city)
async def receive_birth_city(message: Message, state: FSMContext):
    city = (message.text or "").strip()
    if not city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        return

    # –ü—Ä–æ–±—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    try:
        geo = await geocode_city_ru(city)
    except GeocodingError as e:
        logger.warning(f"Geocoding failed for '{city}': {e}")
        geo = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    city_data = {
        "city_input": city,
        "geo": geo
    }
    await state.update_data(pending_birth_city=city_data)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    if geo:
        place = geo["place_name"]
        display_text = f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {place}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
    else:
        display_text = f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {city}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–µ—Ä–Ω–æ", callback_data="bcity:confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="bcity:redo"
                )
            ],
        ]
    )
    await message.answer(display_text, reply_markup=kb)
    await state.set_state(ProfileForm.waiting_for_birth_city_confirm)


@dp.callback_query(F.data == "bcity:confirm")
async def on_birth_city_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    city_data = data.get("pending_birth_city")
    if not city_data:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    city_input = city_data["city_input"]
    geo = city_data["geo"]

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        user.birth_city_input = city_input

        # –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è,
        # —Å—Ç—Ä–∞–Ω—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if geo:
            user.birth_place_name = geo.get("place_name")
            user.birth_country_code = geo.get("country_code")
            user.birth_lat = geo.get("lat")
            user.birth_lon = geo.get("lon")
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            user.birth_place_name = None
            user.birth_country_code = None
            user.birth_lat = None
            user.birth_lon = None

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(pending_birth_city=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if geo:
        place = geo["place_name"]
        lat = geo["lat"]
        lon = geo["lon"]
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞—à–ª–∞: {place}\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f} ‚úÖ"
        )
    else:
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "–ü—Ä–∏–Ω—è—Ç–æ! –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –ø–æ –±–∞–∑–µ. "
            "–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–†–æ—Å—Å–∏—è, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä') "
            "–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥."
        )

    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëçüèº –ó–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:exact",
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§èüèº –ó–Ω–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:approx",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üëéüèº –ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è –≤–æ–æ–±—â–µ",
                    callback_data="timeacc:unknown",
                )
            ],
        ]
    )
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è "
        "ü™Ñ  \n\n\n"
        "üï∞ –ü–æ–¥—Å–∫–∞–∂–∏, –∑–Ω–∞–µ—à—å –ª–∏ —Ç—ã –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
        reply_markup=kb,
    )
    await state.set_state(ProfileForm.waiting_for_birth_time_accuracy)
    await callback.answer()


@dp.callback_query(F.data == "bcity:redo")
async def on_birth_city_redo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ"""
    await state.update_data(pending_birth_city=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –∂–µ –±–ª–∏–∂–∞–π—à–∏–π "
        "–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥\n"
        "–ø—Ä–∏–º–µ—Ä: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_city)
    await callback.answer()


@dp.callback_query(F.data.startswith("timeacc:"))
async def set_birth_time_accuracy(callback: CallbackQuery, state: FSMContext):
    cb_data = cast(str, callback.data)
    _, value = cb_data.split(":", 1)
    if value not in {"exact", "approx", "unknown"}:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    # –î–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "unknown" –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º –≤ –ë–î ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if value != "unknown":
        async with get_session() as session:
            cb_user = cast(TgUser, callback.from_user)
            res = await session.execute(
                select(DbUser).where(
                    DbUser.telegram_id == cb_user.id
                )
            )
            user = res.scalar_one_or_none()
            if user is None:
                await callback.answer(
                    "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                    show_alert=True,
                )
                await state.clear()
                return
            user.birth_time_accuracy = value

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if value == "exact":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        await state.update_data(time_accuracy_type="exact")
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "–°—É–ø–µ—Ä! ü§åüèº  \n\n"
            + "—Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –±–∏—Ä–∫–µ/—Å–ø—Ä–∞–≤–∫–µ "
            + "–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
            + "–ø—Ä–∏–º–µ—Ä: 10:38"
        )
        await state.set_state(ProfileForm.waiting_for_birth_time_local)
    elif value == "approx":
        await state.update_data(time_accuracy_type="approx")
        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(
            "–ü—Ä–∏–Ω—è—Ç–æ! ‚úåüèº  \n\n"
            "üï∞ –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
            "–ø—Ä–∏–º–µ—Ä: 11:00"
        )
        await state.set_state(ProfileForm.waiting_for_birth_time_local)
    else:  # unknown
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        display_text = "–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í–µ—Ä–Ω–æ", callback_data="btime_unknown:confirm"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è",
                        callback_data="btime_unknown:specify"
                    )
                ],
            ]
        )

        cb_msg = cast(Message, callback.message)
        await cb_msg.answer(display_text, reply_markup=kb)
        await state.set_state(
            ProfileForm.waiting_for_birth_time_unknown_confirm
        )

    await callback.answer()


@dp.message(ProfileForm.waiting_for_birth_time_local)
async def receive_birth_time_local(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    from datetime import datetime as dt_mod
    try:
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
        t = dt_mod.strptime(text, "%H:%M").time()
    except ValueError:
        await message.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
            "–ß–ß:–ú–ú\n"
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:38"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    data = await state.get_data()
    time_accuracy_type = data.get("time_accuracy_type", "exact")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(pending_birth_time=t.isoformat())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    time_str = t.strftime("%H:%M")
    if time_accuracy_type == "exact":
        display_text = (
            f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
        )
        next_state = ProfileForm.waiting_for_birth_time_confirm
        callback_data = "btime:confirm"
        redo_callback_data = "btime:redo"
    else:  # approx
        display_text = (
            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëáüèº"
        )
        next_state = ProfileForm.waiting_for_birth_time_approx_confirm
        callback_data = "btime_approx:confirm"
        redo_callback_data = "btime_approx:redo"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–µ—Ä–Ω–æ", callback_data=callback_data
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data=redo_callback_data
                )
            ],
        ]
    )
    await message.answer(display_text, reply_markup=kb)
    await state.set_state(next_state)


@dp.callback_query(F.data == "btime:confirm")
async def on_birth_time_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    time_iso = data.get("pending_birth_time")
    if not time_iso:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    from datetime import time as _time
    try:
        t = _time.fromisoformat(time_iso)
    except Exception:
        await callback.answer(
            "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        return

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        user.birth_time_local = t

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ UTC-—Å–º–µ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç–∞
        try:
            if (
                user.birth_date
                and user.birth_lat is not None
                and user.birth_lon is not None
            ):
                tzres = resolve_timezone(
                    user.birth_lat, user.birth_lon, user.birth_date, t
                )
                if tzres:
                    user.tzid = tzres.tzid
                    user.tz_offset_minutes = tzres.offset_minutes
                    user.birth_datetime_utc = tzres.birth_datetime_utc
                    tz_label = (
                        f"{tzres.tzid} "
                        f"({format_utc_offset(tzres.offset_minutes)})"
                    )
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_label}"
                    )
                else:
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "
                        "–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."
                    )
            else:
                cb_msg = cast(Message, callback.message)
                await cb_msg.answer(
                    "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                    "–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω—É–∂–Ω—ã –¥–∞—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "
                    "–º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."
                )
        except Exception as e:
            logger.warning(f"Timezone resolve failed: {e}")
            cb_msg = cast(Message, callback.message)
            await cb_msg.answer(
                "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                "–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(pending_birth_time=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await state.clear()
    await show_profile_completion_message(callback)
    await callback.answer()


@dp.callback_query(F.data == "btime:redo")
async def on_birth_time_redo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ"""
    await state.update_data(pending_birth_time=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:38"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_time_local)
    await callback.answer()


@dp.callback_query(F.data == "btime_approx:confirm")
async def on_birth_time_approx_confirm(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    time_iso = data.get("pending_birth_time")
    if not time_iso:
        await callback.answer(
            "–ù–µ –Ω–∞—à–ª–∞ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True,
        )
        return

    from datetime import time as _time
    try:
        t = _time.fromisoformat(time_iso)
    except Exception:
        await callback.answer(
            "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        return

    cb_user = cast(TgUser, callback.from_user)
    async with get_session() as session:
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == cb_user.id)
        )
        user = res.scalar_one_or_none()
        if user is None:
            await callback.answer(
                "–ü–æ—Ö–æ–∂–µ, –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏ /start üí´",
                show_alert=True,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        user.birth_time_local = t

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ UTC-—Å–º–µ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç–∞
        try:
            if (
                user.birth_date
                and user.birth_lat is not None
                and user.birth_lon is not None
            ):
                tzres = resolve_timezone(
                    user.birth_lat, user.birth_lon, user.birth_date, t
                )
                if tzres:
                    user.tzid = tzres.tzid
                    user.tz_offset_minutes = tzres.offset_minutes
                    user.birth_datetime_utc = tzres.birth_datetime_utc
                    tz_label = (
                        f"{tzres.tzid} "
                        f"({format_utc_offset(tzres.offset_minutes)})"
                    )
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_label}"
                    )
                else:
                    cb_msg = cast(Message, callback.message)
                    await cb_msg.answer(
                        "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å "
                        "–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."
                    )
            else:
                cb_msg = cast(Message, callback.message)
                await cb_msg.answer(
                    "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                    "–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω—É–∂–Ω—ã –¥–∞—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "
                    "–º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."
                )
        except Exception as e:
            logger.warning(f"Timezone resolve failed: {e}")
            cb_msg = cast(Message, callback.message)
            await cb_msg.answer(
                "–û—Ç–ª–∏—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚è±‚úÖ\n"
                "–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(pending_birth_time=None)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await state.clear()
    await show_profile_completion_message(callback)
    await callback.answer()


@dp.callback_query(F.data == "btime_approx:redo")
async def on_birth_time_approx_redo(
    callback: CallbackQuery, state: FSMContext
):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ"""
    await state.update_data(pending_birth_time=None)
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 11:00"
    )
    try:
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(ProfileForm.waiting_for_birth_time_local)
    await callback.answer()


@dp.callback_query(F.data == "btime_unknown:confirm")
async def on_birth_time_unknown_confirm(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É"""
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ! üîÆ  \n\n"
        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è üëåüèº \n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç —á—É—Ç—å –º–µ–Ω–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ "
        "–∞–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ–π! üíØüöÄ"
    )

    await state.clear()
    await show_profile_completion_message(callback)
    await callback.answer()


@dp.callback_query(F.data == "btime_unknown:specify")
async def on_birth_time_unknown_specify(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        cb_msg = cast(Message, callback.message)
        await cb_msg.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëçüèº –ó–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:exact",
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§èüèº –ó–Ω–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data="timeacc:approx",
                )
            ],
        ]
    )

    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π —É–∫–∞–∂–µ–º –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è üï∞\n\n"
        "–ü–æ–¥—Å–∫–∞–∂–∏, –∑–Ω–∞–µ—à—å –ª–∏ —Ç—ã –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
        reply_markup=kb,
    )
    await state.set_state(ProfileForm.waiting_for_birth_time_accuracy)
    await callback.answer()


@dp.callback_query(F.data == "start_moon_analysis")
async def on_start_moon_analysis(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–Ω–µ–º' - –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –õ—É–Ω—ã"""
    await start_moon_analysis(callback, state)


@dp.callback_query(F.data == "personal_cabinet")
async def on_personal_cabinet(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ä–∞–∑–±–æ—Ä–∞—Ö.\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üöß"
    )


@dp.callback_query(F.data == "buy_analysis")
async def on_buy_analysis(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üí≥ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã:\n"
        "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ - 500‚ÇΩ\n"
        "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π - 500‚ÇΩ\n"
        "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞ - 500‚ÇΩ\n"
        "‚ôÇÔ∏è –ú–∞—Ä—Å - 500‚ÇΩ\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... üöß"
    )


@dp.callback_query(F.data == "new_analysis")
async def on_new_analysis(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üÜï –ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n\n"
        "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–î–∞, –Ω–∞—á–∞—Ç—å", callback_data="ok"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_menu"
                    )
                ]
            ]
        )
    )


@dp.callback_query(F.data == "faq")
async def on_faq(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'FAQ'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "Q: –ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä?\n"
        "A: –≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å "
        "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.\n\n"
        "Q: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–±–æ—Ä?\n"
        "A: –†–∞–∑–±–æ—Ä –õ—É–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã - 500‚ÇΩ –∫–∞–∂–¥–∞—è.\n\n"
        "Q: –ö–∞–∫ –¥–æ–ª–≥–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Ä–∞–∑–±–æ—Ä?\n"
        "A: –û–±—ã—á–Ω–æ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.\n\n"
        "–ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã! üÜò"
    )


@dp.callback_query(F.data == "support")
async def on_support(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üÜò –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏ –Ω–∞–º:\n\n"
        "üìß Email: support@astro-bot.ru\n"
        "üí¨ Telegram: @astro_support\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤! ‚è∞"
    )


@dp.callback_query(F.data == "back_to_menu")
async def on_back_to_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    await callback.answer()
    await show_main_menu(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã
@dp.callback_query(F.data == "get_recommendations")
async def on_get_recommendations(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã —è –º–æ–≥—É –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:\n\n"
        "‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é\n"
        "‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è–º –∏ —Å–µ–º—å–µ\n"
        "‚Ä¢ –†–∞–±–æ—Ç–µ –∏ –∫–∞—Ä—å–µ—Ä–µ\n"
        "‚Ä¢ –ó–¥–æ—Ä–æ–≤—å—é –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üíï –≠–º–æ—Ü–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
                        callback_data="recommend_emotions"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞",
                        callback_data="recommend_career"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí™ –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ",
                        callback_data="recommend_health"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –°–µ–º—å—è –∏ –±—ã—Ç",
                        callback_data="recommend_family"
                    )
                ]
            ]
        )
    )


@dp.callback_query(F.data == "ask_question")
async def on_ask_question(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Ç—Ä–æ–ª–æ–≥—É\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–≤–æ–∏–º —Ä–∞–∑–±–æ—Ä–æ–º –õ—É–Ω—ã:\n\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –æ—Ç–≤–µ—á—É! üí¨\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–º:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è",
                        callback_data="question_relationships"
                    ),
                    InlineKeyboardButton(
                        text="üíº –ö–∞—Ä—å–µ—Ä–∞",
                        callback_data="question_career"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –°–µ–º—å—è",
                        callback_data="question_family"
                    ),
                    InlineKeyboardButton(
                        text="üí™ –ó–¥–æ—Ä–æ–≤—å–µ",
                        callback_data="question_health"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã",
                        callback_data="explore_other_areas"
                    )
                ]
            ]
        )
    )


@dp.callback_query(F.data == "explore_other_areas")
async def on_explore_other_areas(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã'"""
    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã\n\n"
        "–ü–æ–º–∏–º–æ –õ—É–Ω—ã, –≤ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö "
        "–ø–ª–∞–Ω–µ—Ç:\n\n"
        "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ - —Ç–≤–æ—è —Å—É—â–Ω–æ—Å—Ç—å –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞\n"
        "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π - –º—ã—à–ª–µ–Ω–∏–µ –∏ –æ–±—â–µ–Ω–∏–µ\n"
        "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞ - –ª—é–±–æ–≤—å –∏ –∫—Ä–∞—Å–æ—Ç–∞\n"
        "‚ôÇÔ∏è –ú–∞—Ä—Å - —ç–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        "–ö–∞–∂–¥–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –æ —Ç–µ–±–µ!\n\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí≥ –ö—É–ø–∏—Ç—å —Ä–∞–∑–±–æ—Ä",
                        callback_data="buy_analysis"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
                        callback_data="ask_question"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_menu"
                    )
                ]
            ]
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@dp.callback_query(F.data.startswith("recommend_"))
async def on_recommendation_topic(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    topic = (callback.data or "").replace("recommend_", "")

    topic_names = {
        "emotions": "üíï –≠–º–æ—Ü–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "career": "üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞",
        "health": "üí™ –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ",
        "family": "üè† –°–µ–º—å—è –∏ –±—ã—Ç"
    }

    topic_name = topic_names.get(topic, topic)

    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        f"{topic_name}\n\n"
        "–ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ "
        "–õ—É–Ω—ã...\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã",
                        callback_data="explore_other_areas"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="back_to_menu"
                    )
                ]
            ]
        )
    )

    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    # await send_recommendation_to_llm(user_id, topic, moon_analysis_data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data.startswith("question_"))
async def on_question_topic(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    topic = (callback.data or "").replace("question_", "")

    topic_names = {
        "relationships": "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "career": "üíº –ö–∞—Ä—å–µ—Ä–∞",
        "family": "üè† –°–µ–º—å—è",
        "health": "üí™ –ó–¥–æ—Ä–æ–≤—å–µ"
    }

    topic_name = topic_names.get(topic, topic)

    await callback.answer()
    cb_msg = cast(Message, callback.message)
    await cb_msg.answer(
        f"{topic_name}\n\n"
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –ª—É—á—à–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è?\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Å–µ–º—å–µ?\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è?\n\n"
        "–Ø –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã! ‚ú®"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üîÆ –Ø –±–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!
    """
    await message.answer(help_text)


@dp.message()
async def echo_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_session() as session:
        uid = cast(TgUser, message.from_user).id
        res = await session.execute(
            select(DbUser).where(DbUser.telegram_id == uid)
        )
        user = res.scalar_one_or_none()
        if user is not None:
            user.last_seen_at = datetime.now(timezone.utc)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    init_engine()
    from db import engine as _engine
    db_engine: AsyncEngine = _engine  # type: ignore[assignment]

    # –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ/–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ):
    try:
        await ensure_gender_enum(db_engine)
        await ensure_birth_date_nullable(db_engine)
        await ensure_zodiac_enum_ru(db_engine)
        await ensure_planet_enum(db_engine)
        await ensure_prediction_type_enum(db_engine)
    # create_all –±–µ–∑–æ–ø–∞—Å–µ–Ω: —Å–æ–∑–¥–∞—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã,
    # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–µ —Ç—Ä–æ–Ω–µ—Ç
        await create_all(db_engine)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –ë–î: {e}")

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        await dispose_engine()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
