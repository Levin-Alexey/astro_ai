#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
2. –°–æ–∑–¥–∞–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
3. –†–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import logging
from datetime import date, time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_imports():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        import main
        print("‚úÖ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        from handlers.additional_profile_handler import (
            AdditionalProfileForm,
            start_additional_profile_creation,
            handle_additional_name,
            zodiac_sign_ru_for_date,
            format_time_accuracy_message
        )
        print("‚úÖ handlers.additional_profile_handler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
        from models import AdditionalProfile, User, Gender, ZodiacSignRu
        print("‚úÖ models –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –ë–î
        from db import get_session
        print("‚úÖ db –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


async def test_fsm_states():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    try:
        from handlers.additional_profile_handler import AdditionalProfileForm
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        states = [
            AdditionalProfileForm.waiting_for_additional_name,
            AdditionalProfileForm.waiting_for_additional_birth_date,
            AdditionalProfileForm.waiting_for_additional_birth_city,
            AdditionalProfileForm.waiting_for_additional_birth_city_confirm,
            AdditionalProfileForm.waiting_for_additional_birth_time_accuracy,
            AdditionalProfileForm.waiting_for_additional_birth_time_local,
            AdditionalProfileForm.waiting_for_additional_birth_time_confirm,
            AdditionalProfileForm.waiting_for_additional_birth_time_approx_confirm,
            AdditionalProfileForm.waiting_for_additional_birth_time_unknown_confirm,
        ]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(states)} FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_names = [state.state for state in states]
        unique_names = set(state_names)
        
        if len(state_names) == len(unique_names):
            print("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False


async def test_helper_functions():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        from handlers.additional_profile_handler import (
            zodiac_sign_ru_for_date,
            format_time_accuracy_message
        )
        from models import ZodiacSignRu
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
        test_date = date(1990, 6, 15)  # –ë–ª–∏–∑–Ω–µ—Ü—ã
        zodiac = zodiac_sign_ru_for_date(test_date)
        
        if zodiac == ZodiacSignRu.bliznecy:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è zodiac_sign_ru_for_date —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è {ZodiacSignRu.bliznecy}, –ø–æ–ª—É—á–µ–Ω {zodiac}")
            return False
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        test_time = time(14, 30)
        
        exact_msg = format_time_accuracy_message("exact", test_time)
        if "—Ç–æ—á–Ω–æ 14:30" in exact_msg:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è format_time_accuracy_message —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {exact_msg}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False


async def test_database_connection():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from db import get_session
        from models import User, AdditionalProfile
        
        async with get_session() as session:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = await session.execute("SELECT 1")
            if result.scalar() == 1:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def test_geocoding():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from geocoding import geocode_city_ru
        
        # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        result = await geocode_city_ru("–ú–æ—Å–∫–≤–∞")
        
        if result and "place_name" in result and "lat" in result and "lon" in result:
            print(f"‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result['place_name']}")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def test_timezone_calculation():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤...")
    
    try:
        from timezone_utils import resolve_timezone
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã
        result = resolve_timezone(
            lat=55.7558,
            lon=37.6176,
            local_date=date(1990, 6, 15),
            local_time=time(14, 30)
        )
        
        if result and hasattr(result, 'tzid') and hasattr(result, 'offset_minutes'):
            print(f"‚úÖ –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.tzid}")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n")
    
    tests = [
        test_imports,
        test_fsm_states,
        test_helper_functions,
        test_database_connection,
        test_geocoding,
        test_timezone_calculation,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    result = asyncio.run(run_all_tests())
    sys.exit(0 if result else 1)
