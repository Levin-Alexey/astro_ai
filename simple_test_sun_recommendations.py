#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ profile_id –≤ sun_recommendations_worker
"""

import asyncio
import logging
import sys
from datetime import datetime, timezone
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from db import get_session, init_engine, dispose_engine
from models import User, AdditionalProfile, Prediction, Planet, PredictionType, Gender
from sqlalchemy import select
from queue_sender import send_sun_recommendation_to_queue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_TELEGRAM_ID = 999999999
TEST_PROFILE_NAME = "–¢–µ—Å—Ç–æ–≤–∞—è –ó–∞–π–∫–∞"

async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        async with get_session() as session:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=TEST_TELEGRAM_ID,
                first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                username="test_user",
                gender=Gender.male,
                birth_date="1990-01-01",
                birth_time_local="12:00:00",
                birth_time_accuracy="exact",
                birth_city_input="–ú–æ—Å–∫–≤–∞",
                birth_place_name="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                birth_country_code="RU",
                birth_lat=55.7558,
                birth_lon=37.6176,
                tzid="Europe/Moscow",
                tz_offset_minutes=180,
                birth_datetime_utc=datetime(1990, 1, 1, 9, 0, 0, tzinfo=timezone.utc),
                geo_provider="test",
                geo_provider_place_id="test_place_id",
                zodiac_sign="kozerog"
            )
            session.add(user)
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = AdditionalProfile(
                owner_user_id=user.user_id,
                full_name=TEST_PROFILE_NAME,
                gender=Gender.female,
                birth_date="1991-12-10",
                birth_time_local="14:30:00",
                birth_time_accuracy="exact",
                birth_city_input="–ú–æ—Å–∫–≤–∞",
                birth_place_name="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                birth_country_code="RU",
                birth_lat=55.7558,
                birth_lon=37.6176,
                tzid="Europe/Moscow",
                tz_offset_minutes=180,
                birth_datetime_utc=datetime(1991, 12, 10, 11, 30, 0, tzinfo=timezone.utc),
                geo_provider="test",
                geo_provider_place_id="test_place_id",
                zodiac_sign="kozerog"
            )
            session.add(profile)
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            sun_prediction = Prediction(
                user_id=user.user_id,
                profile_id=profile.profile_id,
                planet=Planet.sun,
                prediction_type=PredictionType.paid,
                content="Test Sun Analysis",
                sun_analysis="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
                llm_model="test",
                expires_at=None
            )
            session.add(sun_prediction)
            await session.commit()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id}")
            logger.info(f"  - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile.profile_id}")
            logger.info(f"  - –†–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞: {sun_prediction.prediction_id}")
            
            return user, profile, sun_prediction
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

async def test_sun_recommendations_queue(user, profile, sun_prediction):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        logger.info("üí° –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å —Å profile_id
        success = await send_sun_recommendation_to_queue(
            prediction_id=sun_prediction.prediction_id,
            user_telegram_id=user.telegram_id,
            sun_analysis=sun_prediction.sun_analysis,
            profile_id=profile.profile_id
        )
        
        if success:
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            logger.info(f"  - prediction_id: {sun_prediction.prediction_id}")
            logger.info(f"  - profile_id: {profile.profile_id}")
            logger.info(f"  - profile_name: {profile.full_name}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

async def test_without_profile_id(user, sun_prediction):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ profile_id (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å)"""
    try:
        logger.info("üí° –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ profile_id...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –±–µ–∑ profile_id
        success = await send_sun_recommendation_to_queue(
            prediction_id=sun_prediction.prediction_id,
            user_telegram_id=user.telegram_id,
            sun_analysis=sun_prediction.sun_analysis,
            profile_id=None
        )
        
        if success:
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

async def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        logger.info("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        async with get_session() as session:
            # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–±–æ—Ä—ã
            result = await session.execute(
                select(Prediction).where(Prediction.user_id.in_(
                    select(User.user_id).where(User.telegram_id == TEST_TELEGRAM_ID)
                ))
            )
            predictions = result.scalars().all()
            for p in predictions:
                await session.delete(p)
            
            # –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
            result = await session.execute(
                select(AdditionalProfile).where(AdditionalProfile.owner_user_id.in_(
                    select(User.user_id).where(User.telegram_id == TEST_TELEGRAM_ID)
                ))
            )
            profiles = result.scalars().all()
            for p in profiles:
                await session.delete(p)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == TEST_TELEGRAM_ID)
            )
            user = result.scalar_one_or_none()
            if user:
                await session.delete(user)
            
            await session.commit()
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ profile_id –≤ sun_recommendations_worker...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    init_engine()
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user, profile, sun_prediction = await create_test_data()
        if not all([user, profile, sun_prediction]):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å profile_id (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)
        test1_success = await test_sun_recommendations_queue(user, profile, sun_prediction)
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –±–µ–∑ profile_id (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å)
        test2_success = await test_without_profile_id(user, sun_prediction)
        
        if test1_success and test2_success:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            logger.info("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ profile_id –≤ sun_recommendations_worker —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_data()
        dispose_engine()

if __name__ == "__main__":
    asyncio.run(main())

