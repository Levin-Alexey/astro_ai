from fastapi import FastAPI, Request
import logging
import asyncio
from datetime import datetime, timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

@app.post("/webhook")
async def yookassa_webhook(request: Request):
    try:
        data = await request.json()
        logger.info(f"üî• WEBHOOK RECEIVED: {data}")
        print(f"üî• WEBHOOK RECEIVED: {data}")

        if data.get("event") == "payment.succeeded":
            logger.info(f"üî• PAYMENT SUCCEEDED EVENT!")
            print(f"üî• PAYMENT SUCCEEDED EVENT!")
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
            metadata = data["object"].get("metadata", {})
            user_id = metadata.get("user_id")
            planet = metadata.get("planet")
            profile_id = metadata.get("profile_id")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            payment_id = data["object"].get("id")
            
            if not user_id or not planet:
                logger.error("‚ùå Missing user_id or planet in metadata")
                return {"status": "error", "detail": "Missing metadata"}
            
            try:
                telegram_id = int(user_id)
            except ValueError:
                logger.error("‚ùå Invalid Telegram ID in metadata")
                return {"status": "error", "detail": "Invalid Telegram ID"}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
            logger.info(f"üî• Updating payment status: telegram_id={telegram_id}, planet={planet}, profile_id={profile_id}")
            await update_payment_status(telegram_id, planet, payment_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –∑–∞ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä
            if planet == "all_planets":
                logger.info(f"üî• Processing ALL PLANETS payment")
                from all_planets_handler import get_all_planets_handler
                handler = get_all_planets_handler()
                if handler:
                    await handler.handle_payment_success(telegram_id)
                else:
                    logger.error("‚ùå All planets handler not initialized")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
                profile_id_int = int(profile_id) if profile_id else None
                logger.info(f"üî• Processing SINGLE PLANET payment: planet={planet}, profile_id={profile_id_int}")
                await notify_user_payment_success(telegram_id, planet, profile_id_int)
            
            logger.info(f"‚úÖ Payment processed for Telegram ID {telegram_id}, planet: {planet}")
            
            return {"status": "ok"}

        return {"status": "ignored"}
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}")
        return {"status": "error", "detail": str(e)}


async def update_payment_status(user_id: int, planet: str, external_payment_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î"""
    try:
        from db import get_session
        from models import PlanetPayment, PaymentStatus, PaymentType, Planet
        from sqlalchemy import select
        
        async with get_session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id
            from models import User
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                logger.error(f"‚ùå User with telegram_id {user_id} not found")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ external_payment_id (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
            # –∏–ª–∏ –ø–æ user_id –∏ –ø–ª–∞–Ω–µ—Ç–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
            if planet == "all_planets":
                result = await session.execute(
                    select(PlanetPayment).where(
                        (PlanetPayment.external_payment_id == external_payment_id) |
                        (
                            (PlanetPayment.user_id == user.telegram_id) &
                            (PlanetPayment.payment_type == PaymentType.all_planets) &
                            (PlanetPayment.status == PaymentStatus.pending)
                        )
                    ).order_by(PlanetPayment.created_at.desc())
                )
            else:
                planet_enum = Planet(planet)
                result = await session.execute(
                    select(PlanetPayment).where(
                        (PlanetPayment.external_payment_id == external_payment_id) |
                        (
                            (PlanetPayment.user_id == user.telegram_id) &
                            (PlanetPayment.payment_type == PaymentType.single_planet) &
                            (PlanetPayment.planet == planet_enum) &
                            (PlanetPayment.status == PaymentStatus.pending)
                        )
                    ).order_by(PlanetPayment.created_at.desc())
                )
            
            payment_record = result.scalar_one_or_none()
            if payment_record:
                logger.info(f"‚úÖ Payment record found: {payment_record.payment_id}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
                payment_record.status = PaymentStatus.completed
                payment_record.completed_at = datetime.now(timezone.utc)
                if not payment_record.external_payment_id:
                    payment_record.external_payment_id = external_payment_id
                await session.commit()
                
                logger.info(f"‚úÖ Payment status updated for user {user_id}, planet {planet}")
            else:
                logger.warning(f"‚ö†Ô∏è Payment record not found for user {user_id}, planet {planet}, external_id {external_payment_id}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                debug_result = await session.execute(
                    select(PlanetPayment).where(
                        PlanetPayment.user_id == user.telegram_id
                    ).order_by(PlanetPayment.created_at.desc()).limit(5)
                )
                debug_payments = debug_result.scalars().all()
                logger.info(f"üîç Last 5 payments for user {user_id}:")
                for dp in debug_payments:
                    logger.info(f"  - Payment {dp.payment_id}: {dp.planet}, {dp.status}, external_id: {dp.external_payment_id}")
                
    except Exception as e:
        logger.error(f"‚ùå Error updating payment status: {e}")


async def notify_user_payment_success(user_id: int, planet: str, profile_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        from main import bot
        
        planet_names = {
            "sun": "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ",
            "mercury": "‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π", 
            "venus": "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞",
            "mars": "‚ôÇÔ∏è –ú–∞—Ä—Å",
            "all_planets": "üåå –í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã"
        }
        
        planet_name = planet_names.get(planet, planet)
        
        message = (
            f"üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            f"‚úÖ –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–±–æ—Ä—É {planet_name}!\n\n"
            f"üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä...\n\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        await bot.send_message(user_id, message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–∑–±–æ—Ä–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_planet_analysis(user_id, planet, profile_id))
        
        logger.info(f"‚úÖ Notification sent to user {user_id} for planet {planet}")
        
    except Exception as e:
        logger.error(f"‚ùå Error sending notification to user {user_id}: {e}")


async def generate_planet_analysis(user_id: int, planet: str, profile_id: int = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–ª–∞–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ –≤–æ—Ä–∫–µ—Ä"""
    try:
        logger.info(f"üöÄ Starting planet analysis for user {user_id}, planet {planet}, profile_id: {profile_id}")
        
        # –î–ª—è –°–æ–ª–Ω—Ü–∞ –≤—ã–∑—ã–≤–∞–µ–º start_sun_analysis
        if planet == "sun":
            from astrology_handlers import start_sun_analysis
            astrology_data = await start_sun_analysis(user_id, profile_id)
            
            if astrology_data:
                logger.info(f"‚úÖ Sun analysis data generated for user {user_id}, profile_id: {profile_id}")
            else:
                logger.error(f"‚ùå Failed to generate sun analysis for user {user_id}, profile_id: {profile_id}")
        
        # –î–ª—è –ú–µ—Ä–∫—É—Ä–∏—è –≤—ã–∑—ã–≤–∞–µ–º start_mercury_analysis
        elif planet == "mercury":
            from astrology_handlers import start_mercury_analysis
            astrology_data = await start_mercury_analysis(user_id, profile_id)
            
            if astrology_data:
                logger.info(f"‚òøÔ∏è Mercury analysis data generated for user {user_id}, profile_id: {profile_id}")
            else:
                logger.error(f"‚ùå Failed to generate mercury analysis for user {user_id}, profile_id: {profile_id}")
        
        # –î–ª—è –í–µ–Ω–µ—Ä—ã –≤—ã–∑—ã–≤–∞–µ–º start_venus_analysis
        elif planet == "venus":
            from astrology_handlers import start_venus_analysis
            astrology_data = await start_venus_analysis(user_id, profile_id)
            
            if astrology_data:
                logger.info(f"‚ôÄÔ∏è Venus analysis data generated for user {user_id}, profile_id: {profile_id}")
            else:
                logger.error(f"‚ùå Failed to generate venus analysis for user {user_id}, profile_id: {profile_id}")
        
        # –î–ª—è –ú–∞—Ä—Å–∞ –≤—ã–∑—ã–≤–∞–µ–º start_mars_analysis
        elif planet == "mars":
            from astrology_handlers import start_mars_analysis
            astrology_data = await start_mars_analysis(user_id, profile_id)
            
            if astrology_data:
                logger.info(f"‚ôÇÔ∏è Mars analysis data generated for user {user_id}, profile_id: {profile_id}")
            else:
                logger.error(f"‚ùå Failed to generate mars analysis for user {user_id}, profile_id: {profile_id}")
        
        else:
            logger.warning(f"‚ö†Ô∏è Analysis for {planet} not implemented yet")
                    
    except Exception as e:
        logger.error(f"‚ùå Error generating planet analysis: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")


async def send_prediction_to_worker_queue(prediction_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Ä–∫–µ—Ä–∞"""
    try:
        import aio_pika
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
        RABBITMQ_URL = "amqp://astro_user:astro_password_123@31.128.40.111:5672/"
        QUEUE_NAME = "sun_predictions"
        
        connection = await aio_pika.connect_robust(RABBITMQ_URL)
        channel = await connection.channel()
        
        # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        await channel.declare_queue(QUEUE_NAME, durable=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            "prediction_id": prediction_id,
            "user_id": user_id
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await channel.default_exchange.publish(
            aio_pika.Message(
                json.dumps(message_data).encode(),
                delivery_mode=aio_pika.DeliveryMode.PERSISTENT
            ),
            routing_key=QUEUE_NAME
        )
        
        await connection.close()
        logger.info(f"‚úÖ Prediction {prediction_id} sent to worker queue")
        
    except Exception as e:
        logger.error(f"‚ùå Error sending prediction to worker queue: {e}")



@app.get("/webhook")
async def webhook_get():
    return {"status": "ok", "message": "Webhook endpoint is working"}

@app.get("/health")
async def health_check():
    return {"status": "ok"}
