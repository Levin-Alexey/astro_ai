from fastapi import FastAPI, Request
from sqlalchemy import select
import logging
from datetime import datetime, timedelta
from aiogram import Bot
from config import BOT_TOKEN
from db import engine
from models import User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
app = FastAPI()

@app.post("/webhook")
async def yookassa_webhook(request: Request):
    try:
        data = await request.json()
        logger.info(f"Webhook received: {data}")

        if data.get("event") == "payment.succeeded":
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
            metadata = data["object"].get("metadata", {})
            user_id = metadata.get("user_id")
            planet = metadata.get("planet")
            
            if not user_id or not planet:
                logger.error("‚ùå Missing user_id or planet in metadata")
                return {"status": "error", "detail": "Missing metadata"}
            
            try:
                telegram_id = int(user_id)
            except ValueError:
                logger.error("‚ùå Invalid Telegram ID in metadata")
                return {"status": "error", "detail": "Invalid Telegram ID"}

            # –ü—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                logger.info(f"‚úÖ Payment processed for Telegram ID {telegram_id}, planet: {planet}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                         f"üåç –ü–ª–∞–Ω–µ—Ç–∞: {planet}\n"
                         f"üí∞ –°—É–º–º–∞: 10‚ÇΩ\n\n"
                         f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç—ã –≤ –±–æ—Ç–µ!"
                )
                
                return {"status": "ok"}
            except Exception as bot_error:
                logger.error(f"‚ùå Bot error: {bot_error}")
                return {"status": "error", "detail": "Bot error"}

        return {"status": "ignored"}
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}")
        return {"status": "error", "detail": str(e)}

@app.get("/webhook")
async def webhook_get():
    return {"status": "ok", "message": "Webhook endpoint is working"}

@app.get("/health")
async def health_check():
    return {"status": "ok"}
