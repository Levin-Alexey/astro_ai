#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:
1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
2. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã
3. –ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞
4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –°–æ–ª–Ω—Ü—É
"""

import asyncio
import logging
import sys
from datetime import datetime, timezone
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from db import get_session, init_engine, dispose_engine
from models import User, AdditionalProfile, Prediction, Planet, PredictionType, Gender
from sqlalchemy import select
from handlers.additional_profile_handler import get_additional_profile_astrology_data
from astrology_handlers import start_sun_analysis
from queue_sender import send_sun_recommendation_to_queue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_TELEGRAM_ID = 123456789
TEST_PROFILE_DATA = {
    "full_name": "–¢–µ—Å—Ç–æ–≤–∞—è –ó–∞–π–∫–∞",
    "gender": Gender.female,
    "birth_date": "1991-12-10",
    "birth_time_local": "14:30:00",
    "birth_time_accuracy": "exact",
    "birth_city_input": "–ú–æ—Å–∫–≤–∞",
    "birth_place_name": "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
    "birth_country_code": "RU",
    "birth_lat": 55.7558,
    "birth_lon": 37.6176,
    "tzid": "Europe/Moscow",
    "tz_offset_minutes": 180,
    "birth_datetime_utc": datetime(1991, 12, 10, 11, 30, 0, tzinfo=timezone.utc),
    "geo_provider": "test",
    "geo_provider_place_id": "test_place_id",
    "zodiac_sign": "kozerog"  # –ö–æ–∑–µ—Ä–æ–≥
}

async def create_test_user() -> Optional[User]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await session.execute(
                select(User).where(User.telegram_id == TEST_TELEGRAM_ID)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=TEST_TELEGRAM_ID,
                    first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                    last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username="test_user",
                    gender=Gender.male,
                    birth_date="1990-01-01",
                    birth_time_local="12:00:00",
                    birth_time_accuracy="exact",
                    birth_city_input="–ú–æ—Å–∫–≤–∞",
                    birth_place_name="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                    birth_country_code="RU",
                    birth_lat=55.7558,
                    birth_lon=37.6176,
                    tzid="Europe/Moscow",
                    tz_offset_minutes=180,
                    birth_datetime_utc=datetime(1990, 1, 1, 9, 0, 0, tzinfo=timezone.utc),
                    geo_provider="test",
                    geo_provider_place_id="test_place_id",
                    zodiac_sign="kozerog"
                )
                session.add(user)
                await session.commit()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id}")
            else:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.user_id}")
            
            return user
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def create_test_additional_profile(user: User) -> Optional[AdditionalProfile]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        async with get_session() as session:
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = AdditionalProfile(
                owner_user_id=user.user_id,
                full_name=TEST_PROFILE_DATA["full_name"],
                gender=TEST_PROFILE_DATA["gender"],
                birth_date=TEST_PROFILE_DATA["birth_date"],
                birth_time_local=TEST_PROFILE_DATA["birth_time_local"],
                birth_time_accuracy=TEST_PROFILE_DATA["birth_time_accuracy"],
                birth_city_input=TEST_PROFILE_DATA["birth_city_input"],
                birth_place_name=TEST_PROFILE_DATA["birth_place_name"],
                birth_country_code=TEST_PROFILE_DATA["birth_country_code"],
                birth_lat=TEST_PROFILE_DATA["birth_lat"],
                birth_lon=TEST_PROFILE_DATA["birth_lon"],
                tzid=TEST_PROFILE_DATA["tzid"],
                tz_offset_minutes=TEST_PROFILE_DATA["tz_offset_minutes"],
                birth_datetime_utc=TEST_PROFILE_DATA["birth_datetime_utc"],
                geo_provider=TEST_PROFILE_DATA["geo_provider"],
                geo_provider_place_id=TEST_PROFILE_DATA["geo_provider_place_id"],
                zodiac_sign=TEST_PROFILE_DATA["zodiac_sign"]
            )
            session.add(profile)
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile.profile_id}")
            return profile
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return None

async def test_moon_analysis(profile: AdditionalProfile):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        logger.info("üåô –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
        astrology_data = await get_additional_profile_astrology_data(profile.profile_id)
        if not astrology_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏")
            return False
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(astrology_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã
        async with get_session() as session:
            moon_prediction = Prediction(
                user_id=profile.owner_user_id,
                profile_id=profile.profile_id,
                planet=Planet.moon,
                prediction_type=PredictionType.free,
                content=f"Test Moon Analysis for {profile.full_name}",
                moon_analysis="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
                llm_model="test",
                expires_at=None
            )
            session.add(moon_prediction)
            await session.commit()
            
            logger.info(f"‚úÖ –†–∞–∑–±–æ—Ä –õ—É–Ω—ã —Å–æ–∑–¥–∞–Ω: prediction_id={moon_prediction.prediction_id}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã: {e}")
        return False

async def test_sun_analysis(profile: AdditionalProfile):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        logger.info("‚òÄÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –°–æ–ª–Ω—Ü–∞
        astrology_data = await start_sun_analysis(TEST_TELEGRAM_ID, profile.profile_id)
        if not astrology_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞")
            return False
        
        logger.info(f"‚úÖ –†–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ —Å–æ–∑–¥–∞–Ω: {len(astrology_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î
        async with get_session() as session:
            result = await session.execute(
                select(Prediction).where(
                    Prediction.profile_id == profile.profile_id,
                    Prediction.planet == Planet.sun,
                    Prediction.prediction_type == PredictionType.paid
                ).order_by(Prediction.created_at.desc())
            )
            prediction = result.scalar_one_or_none()
            
            if prediction:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: prediction_id={prediction.prediction_id}")
                return prediction
            else:
                logger.error("‚ùå –ó–∞–ø–∏—Å—å —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞: {e}")
        return False

async def test_sun_recommendations(prediction: Prediction, profile: AdditionalProfile):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –°–æ–ª–Ω—Ü—É"""
    try:
        logger.info("üí° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –°–æ–ª–Ω—Ü—É...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
        success = await send_sun_recommendation_to_queue(
            prediction_id=prediction.prediction_id,
            user_telegram_id=TEST_TELEGRAM_ID,
            sun_analysis="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
            profile_id=profile.profile_id
        )
        
        if success:
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return False

async def test_data_retrieval(profile: AdditionalProfile):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(AdditionalProfile).where(AdditionalProfile.owner_user_id == profile.owner_user_id)
            )
            profiles = result.scalars().all()
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
            for p in profiles:
                logger.info(f"  - {p.full_name} (ID: {p.profile_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–æ—Ä—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            result = await session.execute(
                select(Prediction).where(Prediction.profile_id == profile.profile_id)
            )
            predictions = result.scalars().all()
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {len(predictions)}")
            for p in predictions:
                logger.info(f"  - {p.planet.value} ({p.prediction_type.value})")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        logger.info("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        async with get_session() as session:
            # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–±–æ—Ä—ã
            result = await session.execute(
                select(Prediction).where(Prediction.user_id.in_(
                    select(User.user_id).where(User.telegram_id == TEST_TELEGRAM_ID)
                ))
            )
            predictions = result.scalars().all()
            for p in predictions:
                await session.delete(p)
            
            # –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
            result = await session.execute(
                select(AdditionalProfile).where(AdditionalProfile.owner_user_id.in_(
                    select(User.user_id).where(User.telegram_id == TEST_TELEGRAM_ID)
                ))
            )
            profiles = result.scalars().all()
            for p in profiles:
                await session.delete(p)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == TEST_TELEGRAM_ID)
            )
            user = result.scalar_one_or_none()
            if user:
                await session.delete(user)
            
            await session.commit()
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    init_engine()
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_test_user()
        if not user:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # 2. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = await create_test_additional_profile(user)
        if not profile:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            return
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–æ—Ä –õ—É–Ω—ã
        moon_success = await test_moon_analysis(profile)
        if not moon_success:
            logger.error("‚ùå –¢–µ—Å—Ç —Ä–∞–∑–±–æ—Ä–∞ –õ—É–Ω—ã –Ω–µ –ø—Ä–æ—à–µ–ª")
            return
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–æ—Ä –°–æ–ª–Ω—Ü–∞
        sun_prediction = await test_sun_analysis(profile)
        if not sun_prediction:
            logger.error("‚ùå –¢–µ—Å—Ç —Ä–∞–∑–±–æ—Ä–∞ –°–æ–ª–Ω—Ü–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
            return
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –°–æ–ª–Ω—Ü—É
        recommendations_success = await test_sun_recommendations(sun_prediction, profile)
        if not recommendations_success:
            logger.error("‚ùå –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –ø—Ä–æ—à–µ–ª")
            return
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data_success = await test_data_retrieval(profile)
        if not data_success:
            logger.error("‚ùå –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–µ–ª")
            return
        
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ –ü–æ—Ç–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_data()
        dispose_engine()

if __name__ == "__main__":
    asyncio.run(main())
